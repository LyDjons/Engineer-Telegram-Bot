from datetime import datetime
import re
from functools import wraps
from click.decorators import pass_meta_key
from telebot.asyncio_helper import delete_message

from fileeditor.FileManager import FileManager
from config.config import TELEGRAM_TOKEN, WIALON_URL, ENGINEER_CHAT_ID, THREAD_ID
from config.config import WIALON_TOKEN
from telebot import types
from WialonLocal.WialonManager import WialonManager
import telebot
import json
from WialonLocal.templates.Templates import LOGISTIC_MESSAGE_STATUS
from loader.ExcellLoader import ExcellLoader


bot = telebot.TeleBot(TELEGRAM_TOKEN)
message_mantle = "-"  # –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
mantling_state = {}
# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é Users
user_state = {}
history_msg_mantling = {}


user_id_list = [5015926969,
                947585131,
                775847107,
                7746732602,
                7436821858,
                5019308388,
                811377535,
                405850921, #LyDjons
                353397138
                ]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
button_state = {"claster": ["-","–ß–Ü–ú–ö","–ê–ü","–ê–ö","–°–ê","–ë–ê"],
                "ownership": ["-","–Ω–∞–π–º–∞–Ω–∏–π","–≤–ª–∞—Å–Ω–∏–π"],
                "–≤–ª–∞—Å–Ω–∏–π": ["-","–ª–µ–≥–∫–æ–≤—ñ","–≤–∞–Ω—Ç–∞–∂–Ω—ñ","—Ç—Ä–∞–∫—Ç–æ—Ä–∞","–∫–æ–º–±–∞–π–Ω–∏","–∞–≤—Ç–æ–±—É—Å","—Å–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞"],
                "–Ω–∞–π–º–∞–Ω–∏–π": ["-","–≤–∞–Ω—Ç–∞–∂–Ω—ñ","–∫–æ–º–±–∞–π–Ω–∏","–∞–≤—ñ–∞—Ü—ñ—è","—Ç—Ä–∞–∫—Ç–æ—Ä–∞"],
                "–ª–µ–≥–∫–æ–≤—ñ": ["-","–ø–∞—Ç—Ä—É–ª—å","–±–µ–∑–ø–µ–∫–∞","—ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∞","–∞–≥—Ä–æ–Ω–æ–º—ñ—á–Ω–∞","—ñ–Ω—à—ñ", "–∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ"],
                "–≤–∞–Ω—Ç–∞–∂–Ω—ñ": ["-","1 –≥—Ä—É–ø–∞","2 –≥—Ä—É–ø–∞"],
                "—Ç—Ä–∞–∫—Ç–æ—Ä–∞": ["-","–≤–∞–∂–∫—ñ","–ª–µ–≥–∫—ñ"],
                }

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —é–∑–µ—Ä–∞
def check_permissions(func):
    @wraps(func)
    def wrapper(message_or_callback, *args, **kwargs):
        #print(f"arg = {isinstance(message_or_callback, telebot.types.Message)}")
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É: —è–∫—â–æ —Ü–µ callback_query
            if isinstance(message_or_callback, telebot.types.Message):  # —Ü–µ message
                message = message_or_callback
                print(f"User id: {message.from_user.id} username {message.from_user.username} push-> {message.text}")
            elif isinstance(message_or_callback, telebot.types.CallbackQuery):  # —Ü–µ callback_query
                callback_query = message_or_callback
                user = callback_query.from_user
                print(f"User id: {user.id} username {user.username} push-> {callback_query.data}")
            else:
                print("Unknown type of message_or_callback")

        except Exception as e:
            print(f"Error accessing mssage or callback_query: {e}")

        if message_or_callback.from_user.id not in user_id_list:
            bot.send_message(message_or_callback.chat.id,
                             "–•—Ç–æ —Ç–∏, –≤–æ—ó–Ω?\n–ö–∏–Ω—å 100 –≥—Ä–∏–≤–µ–Ω—å –Ω–∞ –∫–∞—Ä—Ç—É –∞–±–æ –π–¥–∏ –≥–µ—Ç—å\n\n"
                             "`444111115077246`", parse_mode="MarkdownV2")
            return
        return func(message_or_callback, *args, **kwargs)
    return wrapper


# –ì–æ–ª–æ–≤–Ω–Ω–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–¢–µ—Å—Ç')
    btn2 = types.KeyboardButton('–¢–∞—Ä—É–≤–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è')
    btn3 = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç ü§ñ')
    btn4 = types.KeyboardButton('–õ–æ–≥—ñ—Å—Ç–∏–∫–∞')
    btn5 = types.KeyboardButton('–Ü–Ω–∂–µ–Ω–µ—Ä GPS')
    clear_button = types.KeyboardButton("–†–µ–±—É—Ç")
    markup.add(btn4, btn5)
    markup.add(btn2, btn3)
    #markup.add(clear_button, btn3)
    return markup

# –ü—ñ–¥–º–µ–Ω—é –¥–ª—è –ø–æ—à—É–∫—É
def logistic_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í–∞–Ω—Ç–∞–∂–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
    btn2 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    return markup

# –ú–µ–Ω—é —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
def fueltable_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å')
    btn2 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    return markup

# –ú–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
def fueltable_convert_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–£-02 => Wialon.cvs')
    btn2 = types.KeyboardButton('Bitrek Sensor => Wialon.cvs')
    btn_test = types.KeyboardButton("TEST")
    btn3 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add(btn_test, btn3)
    return markup

def logistic_inline_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)  # row_width=2 —Å–¥–µ–ª–∞–µ—Ç –¥–≤–∞ —Å—Ç–æ–ª–±–∏–∫–∞
    btn1 = types.InlineKeyboardButton('–ß–Ü–ú–ö', callback_data='–ß–Ü–ú–ö')
    btn2 = types.InlineKeyboardButton('–°–ê', callback_data='–°–ê')
    btn3 = types.InlineKeyboardButton('–ê–ü', callback_data='–ê–ü')
    btn4 = types.InlineKeyboardButton('–ë–ê', callback_data='–ë–ê')
    btn5 = types.InlineKeyboardButton('–ê–ö', callback_data='–ê–ö')
    btn6 = types.InlineKeyboardButton('–Ü–ú–ö', callback_data='–Ü–ú–ö')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return markup

def logistic_group_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
    btn2 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    return markup

def engineer_gps_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú–µ–Ω—é –ø–æ—à—É–∫—É')
    btn2 = types.KeyboardButton('–ú–æ–Ω—Ç–∞–∂')
    btn3 = types.KeyboardButton('–î–µ–º–æ–Ω—Ç–∞–∂')
    btn4 = types.KeyboardButton('–ó–∞–º—ñ–Ω–∞ SIM')
    back = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add(btn4, btn3)
    markup.add(back)
    return markup

def engineer_gps_search_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É')
    btn2 = types.KeyboardButton('–ü–æ EMEI')
    btn3 = types.KeyboardButton('–ü–æ SIM')
    back = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add(btn3, back)
    return markup

def dismantling_gps_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É')
    btn2 = types.KeyboardButton('–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ EMEI')
    back = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add( back)
    return markup

def mantle_stage_1_inline_keyboard(change_claster ='-', change_ownership='-', change_group='-', change_subgroup='-'):
    keyboard = types.InlineKeyboardMarkup()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    btn1 = types.InlineKeyboardButton("–ö–ª–∞—Ç–µ—Ä", callback_data="None")
    btn2 = types.InlineKeyboardButton("–í–ª–∞—Å–Ω—ñ—Å—Ç—å", callback_data="None")
    btn3 = types.InlineKeyboardButton("–ì—Ä—É–ø–∞", callback_data="None")
    btn4 = types.InlineKeyboardButton("–ü—ñ–¥–≥—Ä—É–ø–∞", callback_data="None")
    confirm = types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data="confirm_mantling")
    cancel_mantle = types.InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå", callback_data="cancel_mantling")


    change_claster = types.InlineKeyboardButton(f"{change_claster}", callback_data="change_claster")
    change_ownership = types.InlineKeyboardButton(f"{change_ownership}", callback_data="change_ownership")
    change_group = types.InlineKeyboardButton(f"{change_group}", callback_data="change_group")
    change_subgroup = types.InlineKeyboardButton(f"{change_subgroup}", callback_data="change_subgroup")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(btn1,change_claster)
    keyboard.add(btn2,change_ownership)
    keyboard.add(btn3,change_group)
    keyboard.add(btn4,change_subgroup)
    keyboard.add(confirm)
    keyboard.add(cancel_mantle)

    return keyboard

def mantle_stage_2_inline_keyboard(text_mark='-',text_model='-',text_number='-',text_driver='-'):
    keyboard = types.InlineKeyboardMarkup()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    btn1 = types.InlineKeyboardButton("–ú–∞—Ä–∫–∞", callback_data="None")
    btn2 = types.InlineKeyboardButton("–ú–æ–¥–µ–ª—å", callback_data="None")
    btn3 = types.InlineKeyboardButton("–ù–æ–º–µ—Ä", callback_data="None")
    btn4 = types.InlineKeyboardButton("–í–æ–¥—ñ–π", callback_data="None")
    confirm = types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data="confirm_mantling2")
    cancel_mantle = types.InlineKeyboardButton("–ù–∞–∑–∞–¥üëà ", callback_data="back_mantling")
    button_no = types.InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ ‚ùå", callback_data="cancel_mantling")

    change_mark = types.InlineKeyboardButton(f"{text_mark}", callback_data="change_mark")
    change_model = types.InlineKeyboardButton(f"{text_model}", callback_data="change_model")
    change_number = types.InlineKeyboardButton(f"{text_number}", callback_data="change_number")
    change_driver = types.InlineKeyboardButton(f"{text_driver}", callback_data="change_driver")
    clear_mark = types.InlineKeyboardButton(f"üîÑ", callback_data="update_mark")
    clear_model = types.InlineKeyboardButton(f"üîÑ", callback_data="update_model")
    clear_number = types.InlineKeyboardButton(f"üîÑ", callback_data="update_number")
    clear_driver = types.InlineKeyboardButton(f"üîÑ", callback_data="update_driver")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(btn1,change_mark,clear_mark)
    keyboard.add(btn2,change_model,clear_model)
    keyboard.add(btn3,change_number,clear_number)
    keyboard.add(btn4,change_driver,clear_driver)
    keyboard.add(confirm)
    keyboard.add(cancel_mantle)
    keyboard.add(button_no)

    return keyboard

def mantle_stage_3_inline_keyboard():
    keyboard = types.InlineKeyboardMarkup()

    confirm = types.InlineKeyboardButton("–ú–æ–Ω—Ç–∞–∂ ‚úÖ", callback_data="confirm_mantling3")
    cancel_mantle = types.InlineKeyboardButton("–ù–∞–∑–∞–¥üëà ", callback_data="back_mantling2")
    button_no = types.InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ ‚ùå", callback_data="cancel_mantling")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(confirm)
    keyboard.add(cancel_mantle)
    keyboard.add(button_no)

    return keyboard

def ask_approve_confirmation(specificator:str):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    markup = types.InlineKeyboardMarkup()
    button_yes = types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data="confirm_dismantle") #–±–æ—Ç
    button_yes2 = types.InlineKeyboardButton("–ü–æ–≥–æ–¥–∏—Ç–∏ ‚úÖ", callback_data="approve_dismantle") #—á–∞—Ç
    button_yes3 = types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data="approve_mantle")  # –±–æ—Ç

    button_no = types.InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ ‚ùå", callback_data="decline_dismantle")

    if specificator == "confirm_dismantle":
        markup.add(button_yes, button_no)
    if specificator == "approve_dismantle":
        markup.add(button_yes2, button_no)
    if specificator == "approve_mantle":
        markup.add(button_yes3, button_no)
    return markup

def ask_confirmation(message, count:int, spec_message: str, specificator="simple"):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    markup = types.InlineKeyboardMarkup()

    button_yes = types.InlineKeyboardButton("–¢–ê–ö", callback_data="yes")
    button_find_yes = types.InlineKeyboardButton("–¢–ê–ö", callback_data="yes_find")
    button_dismantling_show = types.InlineKeyboardButton("–¢–ê–ö", callback_data="show_dismantling")
    button_mantling_show = types.InlineKeyboardButton("–¢–ê–ö", callback_data="show_mantling")

    button_no = types.InlineKeyboardButton("–ù–Ü", callback_data="no")

    if specificator =="simple":
        markup.add(button_yes, button_no)
    elif specificator=="find":
        markup.add(button_find_yes, button_no)
        spec_message = f"–ó–º–æ–∂—É –≤–∏–≤–µ—Å—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ {count if count<10 else 10}" if count>1 else ""
    elif specificator == "dismantling":
        markup.add(button_dismantling_show, button_no)
    elif specificator == "mantling":
        markup.add(button_mantling_show, button_no)

    bot.send_message(message.chat.id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ {count} –æ–±'—î–∫—Ç—ñ–≤. {spec_message}\n –í–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç?", reply_markup=markup)

def test_function(message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –í—ã–≤–æ–¥–∏–º ID –∏ Username
    bot.reply_to(message, f"User ID: {user_id}\nUsername: @{username}")
    print(f"User ID: {user_id}\nUsername: @{username}")

def put_in_message_list(ures_id,message_id):
    """
    –§—É–Ω–∫—Ü—ñ—è —è–∫–∞ –∑–∞–ø–∏—Å—É—î –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É –≤ put_in_message_list —â–æ–± –ø–æ—Ç—ñ–º —ó—Ö –ø–æ–≤–∏–¥–∞–ª—è—Ç—å
    :param ures_id:
    :param message_id:
    :return:
    """
    if ures_id not in history_msg_mantling:
        history_msg_mantling[ures_id] = []
    history_msg_mantling[ures_id].append(message_id)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π message_id –≤ —Å–ø–∏—Å–æ–∫

def delete_history_msg(message_chat_id):
    for msg in history_msg_mantling[message_chat_id]:
        bot.delete_message(chat_id=message_chat_id, message_id=msg)

    if message_chat_id in history_msg_mantling:
        del history_msg_mantling[message_chat_id]

def user_input_text_mantling2(message, additional_param: str):
    global message_mantle  # –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É
    message_mantle = message.text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∑–º—ñ–Ω–Ω—É
    put_in_message_list(message.chat.id,message.id)

    msg = bot.send_message(message.chat.id, f"–í–∏ –≤–≤–µ–ª–∏ : {message_mantle}.\n"
                                      f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è üîÑ")
    put_in_message_list(message.chat.id, msg.message_id)


    if message.from_user.id not in mantling_state:
        mantling_state[message.from_user.id] = {
            "mark":"-",
            "model":"-",
            "number":"-",
            "driver":"-"
        }  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    mantling_state[message.from_user.id][additional_param] = message.text  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

def check_mantling_status(claster_text, ownership_text, group_text, subgroup_text):
    """
    –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ–± –≤—Å—ñ –≥—Ä—É–ø–∏ –±—É–ª–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    :param claster_text: –∫–ª–∞—Å—Ç–µ—Ä
    :param ownership_text: –≤–ª–∞—Å–Ω—ñ—Å—Ç—å
    :param group_text: –≥—Ä—É–ø–∞
    :param subgroup_text: –ø—ñ–¥–≥—Ä—É–ø–∞
    :return: True —â–∫ False
    """
    if claster_text == '-': return False
    if ownership_text == '-': return False
    if ownership_text == '–Ω–∞–π–º–∞–Ω–∏–π' :return True
    if subgroup_text == '-' and group_text == '-': return False
    if subgroup_text == '-':
        if group_text in ["-","–ª–µ–≥–∫–æ–≤—ñ","–≤–∞–Ω—Ç–∞–∂–Ω—ñ","—Ç—Ä–∞–∫—Ç–æ—Ä–∞"]: return False
    return True

def add_to_wialon_group(obj_id,json_info,session):

    result = {
        'success': [],
        'not added': [],
         'already added': [],
         'not found group' : [],
         'none': []
    }

    temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –û–±—â–∞—è"

    #–¥–æ–±–∞–≤–ª—è—î–º –≤ –æ—Å–Ω–æ–≤–Ω—ñ –≥—Ä—É–ø–∏
    response = session._add_obj_to_group(obj_id,temp_group)
    result[response].append(temp_group)

    if json_info['–ì—Ä—É–ø–∞'] == '–ª–µ–≥–∫–æ–≤—ñ':
        temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–µ–≥–∫–æ–≤–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
        response = session._add_obj_to_group(obj_id, temp_group)
        result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] == '–ø–∞—Ç—Ä—É–ª—å':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–ê –ü–∞—Ç—Ä—É–ª—å–Ω–∞ —Å–ª—É–∂–±–∞"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
            #–î–æ–±–∞–≤–ª—è—î–º–æ –≤ –Ü–ú–ö –ø–∞—Ç—Ä—É–ª—å–Ω–∞ —Å–ª—É–∂–±–∞
            temp_group = "–Ü–ú–ö –ø–∞—Ç—Ä—É–ª—å–Ω–∞ —Å–ª—É–∂–±–∞"
            response = session._add_obj_to_group_for_groupID(obj_id, 2275)
            result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] == '–±–µ–∑–ø–µ–∫–∞':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–ê –°–ª—É–∂–±–∞ –±–µ–∑–ø–µ–∫–∏"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] == '—ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∞':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–ê –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∞ —Å–ª—É–∂–±–∞"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] == '–∞–≥—Ä–æ–Ω–æ–º—ñ—á–Ω–∞':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–ê –ê–≥—Ä–æ–Ω–æ–º—ñ—á–Ω–∞ —Å–ª—É–∂–±–∞"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] == '—ñ–Ω—à—ñ':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–ê –Ü–Ω—à—ñ —Å–ª—É–∂–±–∏"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] == '–∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –õ–ê –ö–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)

    if json_info['–ì—Ä—É–ø–∞'] == '–≤–∞–Ω—Ç–∞–∂–Ω—ñ':
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] =='1 –≥—Ä—É–ø–∞':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
        if json_info['–ü—ñ–¥–≥—Ä—É–ø–∞'] =='2 –≥—Ä—É–ø–∞':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 2 –≥—Ä—É–ø–∞"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)
        if json_info['–í–ª–∞—Å–Ω—ñ—Å—Ç—å'] =='–Ω–∞–π–º–∞–Ω–∏–π':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)

    if json_info['–ì—Ä—É–ø–∞'] == '–∫–æ–º–±–∞–π–Ω–∏':

        temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –ö–æ–º–±–∞–π–Ω–∏"
        response = session._add_obj_to_group(obj_id, temp_group)
        result[response].append(temp_group)

    if json_info['–ì—Ä—É–ø–∞'] == '–∞–≤—Ç–æ–±—É—Å':
        temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –ê–≤—Ç–æ–±—É—Å–∏"
        response = session._add_obj_to_group(obj_id, temp_group)
        result[response].append(temp_group)

    if json_info['–ì—Ä—É–ø–∞'] == '—Å–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞':
        temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} –°–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞"
        response = session._add_obj_to_group(obj_id, temp_group)
        result[response].append(temp_group)

    if json_info['–ì—Ä—É–ø–∞'] == '–∞–≤—ñ–∞—Ü—ñ—è':
        temp_group = "–Ü–ú–ö –ê–≤—ñ–∞—Ü—ñ—è"
        response = session._add_obj_to_group_for_groupID(obj_id,1404)
        result[response].append(temp_group)

    if json_info['–í–ª–∞—Å–Ω—ñ—Å—Ç—å'] == '–Ω–∞–π–º–∞–Ω–∏–π':
        if json_info['–ì—Ä—É–ø–∞'] != '–∞–≤—ñ–∞—Ü—ñ—è':
            temp_group = f"{json_info['–ö–ª–∞—Å—Ç–µ—Ä']} —ñ—Å—Ç–æ—Ä—ñ—è"
            response = session._add_obj_to_group(obj_id, temp_group)
            result[response].append(temp_group)

    return result

@bot.callback_query_handler(func=lambda call: call.data in ["change_claster","change_ownership","confirm_mantling",
                                                            "change_group","change_subgroup","cancel_mantling",
                                                            "back_mantling","change_mark","change_model",
                                                            "change_number","change_driver","update_mark","update_model",
                                                            "update_number","update_driver","confirm_mantling2",
                                                            "confirm_mantling3","back_mantling2","approve_mantle"])
@check_permissions
def callback_mantling(call):

    # –¢–µ–∫—Å—Ç –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫
    keyboard_data = call.message.json.get('reply_markup').get('inline_keyboard')
    claster_text = get_button_text_by_callback('change_claster', keyboard_data)
    ownership_text = get_button_text_by_callback('change_ownership', keyboard_data)
    group_text = get_button_text_by_callback('change_group', keyboard_data)
    subgroup_text = get_button_text_by_callback('change_subgroup', keyboard_data)
    mark_text = get_button_text_by_callback('change_mark', keyboard_data)
    model_text = get_button_text_by_callback('change_model', keyboard_data)
    number_text = get_button_text_by_callback('change_number', keyboard_data)
    driver_text = get_button_text_by_callback('change_driver', keyboard_data)
    global message_mantle
    #print(f"callback= {call.data}")
    """print(f"–î–∞–Ω—ñ –∫–Ω–æ–ø–æ–∫ :\n "
                            f"{claster_text}\n"
                            f"{ownership_text}\n"
                            f"{group_text}\n"
                            f"{subgroup_text}"
                            )"""
    """print(f"–î–∞–Ω—ñ –∫–Ω–æ–ø–æ–∫ :\n "
                                f"mark={mark_text}\n"
                                f"model={model_text}\n"
                                f"number={number_text}\n"
                                f"driver={driver_text}"
                                )"""
    #—è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—Ç–µ—Ä—É
    if call.data == "change_claster":

        #–ø–æ –æ—Ç—Ä–∏–º–∞–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≤ —Å–ª–æ–≤–Ω–∏–∫—É –ø–æ –∫–ª—é—á—É claster
        next_index = button_state["claster"].index(claster_text) + 1
        if next_index > len(button_state["claster"]) - 1:
            next_index = 1
        keyboard = mantle_stage_1_inline_keyboard(change_claster=button_state["claster"][next_index],
                                                  change_ownership=ownership_text,
                                                  change_group=group_text,
                                                  change_subgroup=subgroup_text)

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

    if call.data == "change_ownership":
        # –¥–∞–Ω—ñ –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
        next_index = button_state["ownership"].index(ownership_text) + 1
        if next_index > len(button_state["ownership"]) - 1:
            next_index = 1
        keyboard = mantle_stage_1_inline_keyboard(change_claster=claster_text,
                                                  change_ownership=button_state["ownership"][next_index],
                                                  change_group="-",
                                                  change_subgroup="-")

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

    if call.data == "change_group":

        # –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø
        key_list = "-"
        if ownership_text == "–≤–ª–∞—Å–Ω–∏–π":
            key_list = "–≤–ª–∞—Å–Ω–∏–π"
        if ownership_text == "–Ω–∞–π–º–∞–Ω–∏–π":
            key_list = "–Ω–∞–π–º–∞–Ω–∏–π"


        next_index = button_state[key_list].index(group_text) + 1
        if next_index > len(button_state[key_list]) - 1:
            next_index = 1
        keyboard = mantle_stage_1_inline_keyboard(change_claster=claster_text,
                                                  change_ownership=ownership_text,
                                                  change_group=button_state[key_list][next_index],
                                                  change_subgroup="-")

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

    # –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥—Ä—É–ø–∏ –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–≥—Ä—É–ø
    if call.data == "change_subgroup":
        key_list = "-"
        if group_text == "–ª–µ–≥–∫–æ–≤—ñ":
            key_list = "–ª–µ–≥–∫–æ–≤—ñ"
        if group_text == "–≤–∞–Ω—Ç–∞–∂–Ω—ñ":
            key_list = "–≤–∞–Ω—Ç–∞–∂–Ω—ñ"
        if group_text == "—Ç—Ä–∞–∫—Ç–æ—Ä–∞":
            key_list = "—Ç—Ä–∞–∫—Ç–æ—Ä–∞"

        else:
            if key_list == '-': return
        next_index = button_state[key_list].index(subgroup_text) + 1
        if next_index > len(button_state[key_list]) - 1:
            next_index = 1

        subgroup_text = button_state[key_list][next_index]

        # –¥–ª—è –Ω–∞–π–º–∞–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø—ñ–¥–≥—Ä—É–ø–∏
        if ownership_text == "–Ω–∞–π–º–∞–Ω–∏–π":
            subgroup_text = "-"

        #—Ç—É—Ç —è–∫—â–æ –ø—ñ–¥–≥—Ä—É–ø–∞ –Ω–µ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å (–±–æ –Ω–∞–π–º–∞–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞) –º–æ–∂–µ –≤–∏–Ω–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∞
        #–±–æ —Å—Ç–∞–Ω –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è, —Ç–æ–º—É –±–µ—Ä–µ–º –≤ try
        try:

            keyboard = mantle_stage_1_inline_keyboard(change_claster=claster_text,
                                                      change_ownership=ownership_text,
                                                      change_group=group_text,
                                                      change_subgroup=subgroup_text)

            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
        except Exception as e:
            #print(f"–ù–µ–º–∞ —á–æ–≥–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏: {e}")
            pass

    if call.data == "confirm_mantling":

        if check_mantling_status(claster_text,ownership_text,group_text,subgroup_text) == False:
            msg = bot.send_message(call.message.chat.id,"–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä, –≤–ª–∞—Å–Ω—ñ—Å—Ç—å, –≥—Ä—É–ø–∏ —Ç–∞ –ø—ñ–¥–≥—Ä—É–ø–∏")
            put_in_message_list(call.message.chat.id, msg.message_id)
            return
        #–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ 2 json. –í–∏—Ç—è–≥—É—î–º–æ —ó—Ö —ñ–∑ call.message.text —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ json –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ–±—Ä–æ–±—ñ—Ç–∫—É
        json_match = re.findall(r'\{(.*?)\}',call.message.text,re.DOTALL)
        json1 = "{" + json_match[0].strip().replace("\n", "").replace("    ", "") + "}"
        json1 = json.loads(json1)
        json2 = "{" + json_match[1].strip().replace("\n", "").replace("    ", "") + "}"
        json2 = json.loads(json2)

        #print(json1)
        #print(json2)
        #print(f"all button: {call.message.json.get('reply_markup').get('inline_keyboard')}")
        text_cluster = call.message.json.get('reply_markup').get('inline_keyboard')[0][1].get('text')

        json2['–ö–ª–∞—Å—Ç–µ—Ä'] = text_cluster
        json2['–û–ø–µ—Ä–∞—Ü—ñ—è'] = '–ú–æ–Ω—Ç–∞–∂'
        json2['–í–ª–∞—Å–Ω—ñ—Å—Ç—å'] = ownership_text
        json2['–ì—Ä—É–ø–∞'] = group_text
        json2['–ü—ñ–¥–≥—Ä—É–ø–∞'] = subgroup_text


        json2['–ú–∞—Ä–∫–∞'] = "-" if json2['–ú–∞—Ä–∫–∞'] in ["-","",None] else json2['–ú–∞—Ä–∫–∞']
        json2['–ú–æ–¥–µ–ª—å'] = "-" if json2['–ú–æ–¥–µ–ª—å'] in ["-","",None] else json2['–ú–æ–¥–µ–ª—å']
        json2['–ù–æ–º–µ—Ä'] = "-" if json2['–ù–æ–º–µ—Ä'] in ["-","",None] else json2['–ù–æ–º–µ—Ä']
        json2['–í–æ–¥–∏—Ç–µ–ª—å'] = "-" if json2['–í–æ–¥–∏—Ç–µ–ª—å'] in ["-","",None] else json2['–í–æ–¥–∏—Ç–µ–ª—å']

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–¥–∞
        # formatted_text = "```\n" + json.dumps(text, indent=4, ensure_ascii=False) + "\n```"
        formatted_text = f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n```\n{json.dumps(json2, indent=4,ensure_ascii=False)}\n```"

        #keyboard = mantle_stage_1_inline_keyboard(change_claster=text_cluster)
        keyboard2 = mantle_stage_2_inline_keyboard(text_mark=json2['–ú–∞—Ä–∫–∞'],
                                                   text_model=json2['–ú–æ–¥–µ–ª—å'],
                                                   text_number=json2['–ù–æ–º–µ—Ä'],
                                                   text_driver=json2['–í–æ–¥–∏—Ç–µ–ª—å'])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.edit_message_text(
            formatted_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard2,
            parse_mode='Markdown'
        )

    if call.data == "back_mantling2":

        json_match = re.findall(r'\{(.*?)\}', call.message.text, re.DOTALL)
        json1 = "{" + json_match[0].strip().replace("\n", "").replace("    ", "") + "}"
        json1 = json.loads(json1)
        json2 = "{" + json_match[1].strip().replace("\n", "").replace("    ", "") + "}"
        json2 = json.loads(json2)

        formatted_text = f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n```\n{json.dumps(json2, indent=4, ensure_ascii=False)}\n```"
        keyboard2 = mantle_stage_2_inline_keyboard(text_mark=json2['–ú–∞—Ä–∫–∞'],
                                                   text_model=json2['–ú–æ–¥–µ–ª—å'],
                                                   text_number=json2['–ù–æ–º–µ—Ä'],
                                                   text_driver=json2['–í–æ–¥–∏—Ç–µ–ª—å'])


        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.edit_message_text(
            formatted_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard2,
            parse_mode='Markdown'
        )

    if call.data == "back_mantling":

        json_match = re.findall(r'\{(.*?)\}', call.message.text, re.DOTALL)
        #json1 = "{" + json_match[0].strip().replace("\n", "").replace("    ", "") + "}"
        #json1 = json.loads(json1)
        json2 = "{" + json_match[1].strip().replace("\n", "").replace("    ", "") + "}"
        json2 = json.loads(json2)

        #text_cluster = call.message.json.get('reply_markup').get('inline_keyboard')[0][1].get('text')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–¥–∞
        #formatted_text = f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n```\n{json.dumps(json2, indent=4, ensure_ascii=False)}\n```"


        keyboard = mantle_stage_1_inline_keyboard(change_claster=json2['–ö–ª–∞—Å—Ç–µ—Ä'],
                                                  change_ownership=json2['–í–ª–∞—Å–Ω—ñ—Å—Ç—å'],
                                                  change_group=json2['–ì—Ä—É–ø–∞'],
                                                  change_subgroup=json2['–ü—ñ–¥–≥—Ä—É–ø–∞'])

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

    if call.data == "change_mark":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:")
        put_in_message_list(call.message.chat.id,msg.message_id)

        bot.register_next_step_handler(call.message,
                                       lambda message: user_input_text_mantling2(message, "mark"))

    if call.data == "change_model":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:")
        put_in_message_list(call.message.chat.id, msg.message_id)

        bot.register_next_step_handler(call.message,
                                       lambda message: user_input_text_mantling2(message, "model"))

    if call.data == "change_number":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ä–∂. —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:")
        put_in_message_list(call.message.chat.id,msg.message_id)

        bot.register_next_step_handler(call.message,
                                       lambda message: user_input_text_mantling2(message, "number"))

    if call.data == "change_driver":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–æ–¥—ñ—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:")
        put_in_message_list(call.message.chat.id, msg.message_id)

        bot.register_next_step_handler(call.message,
                                       lambda message: user_input_text_mantling2(message, "driver"))

    if call.data == "update_mark":
        if call.message.chat.id in history_msg_mantling : delete_history_msg(call.message.chat.id)

        if call.from_user.id not in mantling_state:
            return  # —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î

        try:
            keyboard = mantle_stage_2_inline_keyboard(text_mark=mantling_state[call.from_user.id]["mark"],
                                                      text_model=model_text,
                                                      text_number=number_text,
                                                      text_driver=driver_text)
            mantling_state[call.from_user.id]["mark"] = "-"

            bot.edit_message_reply_markup(chat_id=call.message.chat.id,message_id=call.message.message_id,
                                          reply_markup=keyboard)
        except Exception as e:
            # print(f"–ù–µ–º–∞ —á–æ–≥–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏: {e}")
            pass
        message_mantle = "-"

    if call.data == "update_model":
        if call.message.chat.id in history_msg_mantling: delete_history_msg(call.message.chat.id)
        if call.from_user.id not in mantling_state:
            return  # —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î
        try:
            keyboard = mantle_stage_2_inline_keyboard( text_mark=mark_text,
                                                       text_model=mantling_state[call.from_user.id]["model"],
                                                    text_number=number_text,
                                                       text_driver=driver_text)
            mantling_state[call.from_user.id]["model"] = "-"
            bot.edit_message_reply_markup(chat_id=call.message.chat.id,message_id=call.message.message_id,
                                        reply_markup=keyboard)
        except Exception as e:
            #print(f"–ù–µ–º–∞ —á–æ–≥–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏: {e}")
            pass
        message_mantle = "-"

    if call.data == "update_number":
        if call.message.chat.id in history_msg_mantling: delete_history_msg(call.message.chat.id)
        if call.from_user.id not in mantling_state:
            return  # —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î
        try:
            keyboard = mantle_stage_2_inline_keyboard(text_mark=mark_text,
                                                      text_model=model_text,
                                                      text_number=mantling_state[call.from_user.id]["number"].upper(),
                                                      text_driver=driver_text)
            mantling_state[call.from_user.id]["number"] = "-"
            bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,message_id=call.message.message_id,reply_markup=keyboard
            )
        except Exception as e:
            # print(f"–ù–µ–º–∞ —á–æ–≥–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏: {e}")
            pass
        message_mantle = "-"

    if call.data == "update_driver":
        if call.message.chat.id in history_msg_mantling: delete_history_msg(call.message.chat.id)
        if call.from_user.id not in mantling_state:
            return  # —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î
        try:
            keyboard = mantle_stage_2_inline_keyboard(text_mark=mark_text,
                                                      text_model=model_text,
                                                      text_number=number_text,
                                                      text_driver=mantling_state[call.from_user.id]["driver"])
            mantling_state[call.from_user.id]["driver"] = "-"

            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,message_id=call.message.message_id,reply_markup=keyboard)
        except Exception as e:
            # print(f"–ù–µ–º–∞ —á–æ–≥–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏: {e}")
            pass
        message_mantle = "-"

    if call.data == "cancel_mantling":
        # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.delete_message(call.message.chat.id, call.message.message_id)
        message_mantle = "-"
        if call.from_user.id in mantling_state:
            del mantling_state[call.from_user.id]

    if call.data == "confirm_mantling2":

        if mark_text == "-" or number_text == "-":
            msg = bot.send_message(call.message.chat.id, "–ü–æ–ª—è –ú–∞—Ä–∫–∞ —Ç–∞ –¥–µ—Ä–∂.–Ω–æ–º–µ—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è")
            put_in_message_list(call.message.chat.id, msg.message_id)
            return

        #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ—Ä–∂–Ω–æ–º–µ—Ä–∞ –Ω–∞ –∞–Ω–≥–ª.—Å–∏–º–≤–æ–ª–∏
        if not all(('–∞' <= c <= '—è' or '–ê' <= c <= '–Ø' or c in '—ñ—î—ó–Ü–á' or c.isdigit()) for c in number_text):
            msg = bot.send_message(call.message.chat.id, f"–î–µ—Ä–∂.–Ω–æ–º–µ—Ä {number_text} –≤–≤–µ–¥–µ–Ω–∏–π ENG üá∫üá∏ –ª—ñ—Ç–µ—Ä–∞–º–∏!")
            put_in_message_list(call.message.chat.id, msg.message_id)

        try:
            session = WialonManager(WIALON_URL,WIALON_TOKEN)
            result = session._get_list_universal("avl_unit",
                                              "sys_name",
                                              f"*{number_text}*",
                                              "sys_name", 1, 1 +256, 0, 10000)
            if result["items"]:
                #print(result["items"])
                msg = bot.send_message(call.message.chat.id, f"–û–±'—î–∫—Ç –∑ –¥–µ—Ä–∂. {number_text} –∑–Ω–∞–π–¥–µ–Ω–æ —É Wialon ‚úÖ ")
                put_in_message_list(call.message.chat.id, msg.message_id)

            if not result["items"]:
                msg = bot.send_message(call.message.chat.id, f"–û–±'—î–∫—Ç –∑ –¥–µ—Ä–∂. {number_text} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É Wialon ‚ùå\n"
                                                             f"–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–æ–≤–∏–π ‚úÖ")
                put_in_message_list(call.message.chat.id, msg.message_id)


        except:
            print("error")
            pass

        # –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ 2 json. –í–∏—Ç—è–≥—É—î–º–æ —ó—Ö —ñ–∑ call.message.text —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ json –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ–±—Ä–æ–±—ñ—Ç–∫—É
        json_match = re.findall(r'\{(.*?)\}', call.message.text, re.DOTALL)
        json1 = "{" + json_match[0].strip().replace("\n", "").replace("    ", "") + "}"
        json1 = json.loads(json1)
        json2 = "{" + json_match[1].strip().replace("\n", "").replace("    ", "") + "}"
        json2 = json.loads(json2)

        json2['–ú–∞—Ä–∫–∞'] = mark_text
        json2['–ú–æ–¥–µ–ª—å'] = model_text if model_text != "-" else "-"
        json2['–ù–æ–º–µ—Ä'] = number_text
        json2['–í–æ–¥–∏—Ç–µ–ª—å'] = driver_text if driver_text!= "-" else "-"
        json2['—ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä'] = call.from_user.username

        formatted_text = f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n```\n{json.dumps(json2, indent=4, ensure_ascii=False)}\n```"

        # keyboard = mantle_stage_1_inline_keyboard(change_claster=text_cluster)
        """keyboard2 = mantle_stage_2_inline_keyboard(text_mark=json2['–ú–∞—Ä–∫–∞'],
                                                   text_model=json2['–ú–æ–¥–µ–ª—å'],
                                                   text_number=json2['–ù–æ–º–µ—Ä'],
                                                   text_driver=json2['–í–æ–¥–∏—Ç–µ–ª—å'])"""
        keyboard3 = mantle_stage_3_inline_keyboard()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.edit_message_text(
            formatted_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard3,
            parse_mode='Markdown'
        )

    if call.data == "confirm_mantling3":

        message_text = call.message.text
        try:
            bot.send_message(ENGINEER_CHAT_ID, f"```\n{message_text}\n```",
                             parse_mode="MarkdownV2",
                             reply_markup=ask_approve_confirmation("approve_mantle"),
                             message_thread_id=THREAD_ID)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç –∑ ID={ENGINEER_CHAT_ID} —Ç–∞ THREAD_ID={THREAD_ID}")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f"```\n{message_text}\n```–ú–æ–Ω—Ç–∞–∂ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç",
                         parse_mode="MarkdownV2")

    if call.data == "approve_mantle":
        print(f"User : {call.from_user.id} name = {call.from_user.first_name} "
              f"push '{call.data}' "
              f"Chat ID '{call.message.chat.id}' "
              f"message_thread_id = {getattr(call.message, 'message_thread_id', 'No thread ID')}")

        # –ö–æ–ª–∏ –≤ —á–∞—Ç –ø–∞–¥–∞—î –∑–∞—è–≤–∫–∞, —Ç–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–ü–æ–≥–æ–¥–∏—Ç–∏"
        try:
            chat_member = bot.get_chat_member(call.message.chat.id, call.from_user.id)
            print(f"Role: {chat_member.status}")
            if chat_member.status not in ["administrator", "creator"]:
                return
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            bot.send_message(call.message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–ª—ñ", message_thread_id=THREAD_ID)
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ  —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        old_message_id = call.message.message_id

        # –Ø–∫—à–æ –ø—ñ–ª—Å—è –Ω–∞—à–∏—Ö jsons —î —è–∫–∏–π—Å—å —Ç–µ–∫—Å—Ç, —Ç–æ –º–∏ –π–æ–≥–æ –≤—ñ–¥–∫–∏–¥–∞—î–º–æ
        index_symb = call.message.text.rfind('}')
        if index_symb != -1:
            message_text = call.message.text[:index_symb + 1]  # –í–∫–ª—é—á–∞–µ–º —Å–∞–º—É —Å–∫–æ–±–∫—É

        #–ü–∞—Ä—Å–∏–º–æ json 1 —Ç–∞ json 2
        json_match = re.findall(r'\{(.*?)\}', message_text, re.DOTALL)
        json1 = "{" + json_match[0].strip().replace("\n", "").replace("    ", "") + "}"
        json1 = json.loads(json1)
        json2 = "{" + json_match[1].strip().replace("\n", "").replace("    ", "") + "}"
        json2 = json.loads(json2)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ JSON –æ–±—ä–µ–∫—Ç–æ–≤
        after_json_text = message_text.split('}'.join(json_match[:2]))[-1].strip()

        message_time = call.message.date

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Unix timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        readable_time = datetime.fromtimestamp(message_time)
        # print(f"Value of 'nm': {nm_value}")

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        current_datetime = datetime.now()
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        formatted_datetime = current_datetime.strftime('%Y-%m-%d %H:%M:%S')
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        delay = current_datetime - readable_time

        # —Ñ–æ—Ä–º—É—î–º–æ –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –æ–±'—î–∫—Ç—É
        obj_new_name = ""
        if json2['–í–ª–∞—Å–Ω—ñ—Å—Ç—å'] == '–Ω–∞–π–º–∞–Ω–∏–π': obj_new_name += f"{json2['–ö–ª–∞—Å—Ç–µ—Ä']}_"
        obj_new_name += json2['–ú–∞—Ä–∫–∞']
        if json2['–ú–æ–¥–µ–ª—å'] != '-': obj_new_name += f" {json2['–ú–æ–¥–µ–ª—å']}"
        obj_new_name += f" ({json2['–ù–æ–º–µ—Ä']})"
        if json2['–í–æ–¥–∏—Ç–µ–ª—å'] != '-': obj_new_name += f" {json2['–í–æ–¥–∏—Ç–µ–ª—å']}"

        success__description_logs = {
            'success': [],
            'errors': []

        }
        error_description = ""  # –ª–æ–≥ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞
        protocol_name = ""
        sim=""
        obj_new_name = obj_new_name[:50] if len(obj_new_name) > 50 else obj_new_name

        temp_obj = 0

        try:
            info_wialon = WialonManager(WIALON_URL, WIALON_TOKEN)
            # #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–µ—Ä–∂–Ω–æ–º–µ—Ä —É Wialon
            temp_obj = info_wialon._get_list_universal("avl_unit",
                                              "sys_name",
                                              f"*({json2['–ù–æ–º–µ—Ä']})*",
                                              "sys_name", 1, 1 + 256 , 0, 10000)


            if len(temp_obj['items']) > 1:
                bot.send_message(call.message.chat.id, f"–í–∏–±–∞—á—Ç–µ, —è –∑–Ω–∞–π—à–æ–≤ –¥–µ–∫—ñ–ª—å–∫–∞ –æ–±'—î–∫—Ç—ñ–≤ –∑ —Ç–∞–∫–∏–º –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä–æ–º\n"
                                                       f"–í–∏–¥–∞–ª—ñ—Ç—å –∑–∞–π–≤–∏–π —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É", message_thread_id=THREAD_ID)
                return

            #–Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥–∏–Ω –æ–±'—î–∫—Ç –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ
            if len(temp_obj['items']) == 0 or len(temp_obj['items']) == 1:

                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ —Å—Ç–≤–æ—Ä—é—î–º–æ
                if len(temp_obj['items']) == 0:
                    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É —Ç–∞ id_creator

                    print(json2["–ö–ª–∞—Å—Ç–µ—Ä"]=="C–ê")
                    creator_id = info_wialon._get_creator_if_from_claster_ua(json2["–ö–ª–∞—Å—Ç–µ—Ä"])
                    protocol_id = info_wialon._get_id_and_pass_protocol_for_user_mask(json1["–°–µ—Ä–∏—è"])[0]
                    protocol_name = info_wialon._device_type(protocol_id)


                    create_result = info_wialon._create_obj(creator_id, obj_new_name, protocol_id)
                    print(f"creator id={creator_id} protocol id = {protocol_id} protocol name = {protocol_name}")


                    success__description_logs['success'].append(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–∫—Ç = {obj_new_name}"
                                                                f" Creator_id = {creator_id}"
                                                                f" protocol_id = {protocol_id}")

                    temp_obj = info_wialon._get_list_universal("avl_unit",
                                                               "sys_name",
                                                               f"*({json2['–ù–æ–º–µ—Ä']})*",
                                                               "sys_name", 1, 1 + 256, 0, 10000)

                    if "error" in create_result:
                        if create_result['error']==6:
                            error_description += error_description + f"–í—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–ª—å–Ω—ñ –æ–±—î–∫—Ç–∏ –≤ Wialon Local‚ùå"
                        if create_result['error']==4:
                            error_description += error_description + f"–ù–µ –∑–º—ñ–≥ —Å—Ç–≤–æ—Ä–∏—Ç—å –æ–±—î–∫—Ç –≤ Wialon Local‚ùå"
                        success__description_logs['errors'].append(error_description)

                        formatted_text = (f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n"
                                          f"```\n{json.dumps(json2, indent=4, ensure_ascii=False)}\n```"
                                          f"{error_description}")
                        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ —ñ –¥–æ–±–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
                        try:
                            bot.edit_message_text(
                                formatted_text,
                                chat_id=ENGINEER_CHAT_ID,
                                message_id=call.message.message_id,
                                reply_markup=ask_approve_confirmation("approve_mantle"),
                                parse_mode='Markdown'
                            )
                            return
                        except Exception as e:
                            #—Ç—É—Ç –±–∞–∂–∞–Ω–æ —â–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π —á–∞—Ç —Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –≥—ñ–ª–∫—É
                            print("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ Message Telegram. –í—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–ª—å–Ω—ñ –æ–±—î–∫—Ç–∏ –≤ Wialon Local")
                            return
                            pass

                if len(temp_obj['items']) == 1:
                    success__description_logs["success"].append(
                        f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤ Wialon –ø–æ –¥–µ—Ä–∂. = {temp_obj['items'][0]['nm']}")

                # —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if temp_obj['items'][0]['uid'] != "":
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π –¥–æ–¥–∞—î–º–æ error
                    error_description = (f"‚ùå–Ø –Ω–µ –º–æ–∂—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–æ–Ω—Ç–∞–∂\n "
                                         f"–û–±'—î–∫—Ç= {temp_obj['items'][0]['nm']} \n–£–∂–µ –º–∞—î IMEI= {temp_obj['items'][0]['uid']}")
                    success__description_logs["errors"].append(error_description)

                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    # error_description = re.sub(r'([`\*_{}[\]()#+\-.!])', r'\\\1', error_description)
                    error_description = re.sub(r'([`\*_{}[\]#+\-.!])', r'\\\1', error_description)

                    formatted_text = (f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n"
                                      f"```\n{json.dumps(json2, indent=4, ensure_ascii=False)}\n```"
                                      f"{error_description}")
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ —ñ –¥–æ–±–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
                    try:
                        bot.edit_message_text(
                            formatted_text,
                            chat_id=ENGINEER_CHAT_ID,
                            message_id=call.message.message_id,
                            reply_markup=ask_approve_confirmation("approve_mantle"),
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        pass
                    print(error_description)
                    return

                # —è–∫—â–æ –æ–±—î–∫—Ç –±–µ–∑ EMEI
                if temp_obj['items'][0]['uid'] == "":
                    # –û—Ç—Ä–∏–º—É—î–º–æ id –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —ñ –∑–∞–≥–∞–ª—å–Ω–æ–ø—Ä–∏–π–Ω—è—Ç–∏–π –ø–∞—Ä–æ–ª—å [23,"1111"]
                    id_protocol_pass = info_wialon._get_id_and_pass_protocol_for_user_mask(json1["–°–µ—Ä–∏—è"])
                    # update IMEI and protocol
                    info_wialon._update_protocol_imei(temp_obj['items'][0]['id'], id_protocol_pass[0],
                                                      json1['–ò–ú–ï–ò'])
                    success__description_logs["success"].append(f"Update imei = {json1['–ò–ú–ï–ò']}")
                    success__description_logs["success"].append(f"Update_protocol = {id_protocol_pass[0]}")

                    # –¥–æ–±–∞–≤–∏—Ç—å —Å—ñ–º–∫—É
                    response = info_wialon._update_phone(temp_obj['items'][0]['id'], f"%2B38{json1['–¢–µ–ª–µ—Ñ–æ–Ω']}")
                    sim = json1['–¢–µ–ª–µ—Ñ–æ–Ω']

                    # 'error' —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ —Ç–µ —â–æ SIM —É–∂–µ –¥–µ—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –í—ñ–∞–ª–æ–Ω—ñ
                    if 'error' in response:
                        name_with_phone = info_wialon._get_name_obj_for_device_phone(phone=f"*{json1['–¢–µ–ª–µ—Ñ–æ–Ω']}")
                        info_wialon._update_phone(temp_obj['items'][0]['id'], "")
                        sim =""
                        error_description += f"–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∏—Å–∞—Ç–∏ SIM –∫–∞—Ä—Ç—É. –£–∂–µ —î –≤ –æ–±'—î–∫—Ç—ñ: {name_with_phone}"
                        success__description_logs["errors"].append(error_description)
                    else:
                        success__description_logs["success"].append(f"Update sim = {json1['–¢–µ–ª–µ—Ñ–æ–Ω']}")

                # –¥–æ–±–∞–≤–ª—è—î–º–æ –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ç–æ–∫–æ–ª—É
                info_wialon._update_protocol_password(temp_obj['items'][0]['uid'], id_protocol_pass[1])
                success__description_logs["success"].append(f"Update pass protocol = {id_protocol_pass[1]}")

                # –¥–æ–±–∞–≤–ª—è—î–º–æ –æ–±—î–∫—Ç –≤ –≥—Ä—É–ø–∏
                result_group_added = add_to_wialon_group(temp_obj['items'][0]['id'], json2, info_wialon)
                success__description_logs["success"].append(f"Add to groups: {result_group_added}")

                # –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ obj
                info_wialon._rename_unit(temp_obj['items'][0]['id'], obj_new_name)
                success__description_logs["success"].append("–ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –æ–±'—î–∫—Ç")

                # –¥–æ–±–∞–≤–ª—è—î–º–æ —Ç–∞ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –¥–∞—Ç—á–∏–∫
                result_sensors = info_wialon._create_udate_voltage_sensors(temp_obj['items'][0]['id'])
                success__description_logs["success"].append(f"Update sensors: {result_sensors}")

                # —è–∫—â–æ –Ω–∞–π–º —Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ icon
                if json2['–í–ª–∞—Å–Ω—ñ—Å—Ç—å'] == "–Ω–∞–π–º–∞–Ω–∏–π" and json2['–ì—Ä—É–ø–∞'] == "–≤–∞–Ω—Ç–∞–∂–Ω—ñ":
                    info_wialon._change_icon_hired(temp_obj['items'][0]['id'])
                    success__description_logs["success"].append("change icon")

                formatted_text = (f"```\n{json.dumps(json1, indent=4, ensure_ascii=False)}\n```\n"
                                  f"```\n{json.dumps(json2, indent=4, ensure_ascii=False)}\n```"
                                  f"{error_description}")

                bot.edit_message_text(
                    formatted_text,
                    chat_id=ENGINEER_CHAT_ID,
                    message_id=call.message.message_id,
                    reply_markup=ask_approve_confirmation("approve_mantle"),
                    parse_mode='Markdown'
                )


        except Exception as e:
            print(f"Error mantling {e}")

        #—Ñ—ñ–≥–∞—á–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –ø–æ –º–æ–Ω—Ç–∞–∂—É
        print("success:")
        for index, item in enumerate(success__description_logs['success'], start=1):
            print(f"    {index}. {item}")

        error_description =""
        print("errors:")
        for index, item in enumerate(success__description_logs['errors'], start=1):
            error_description =error_description + f"{item}\n\n"
            print(f"    {index}. {item}")
        if len(success__description_logs['errors']) == 0:
            error_description = "\n"

        formatted_message = (
            f"operation    : `{json2['–û–ø–µ—Ä–∞—Ü—ñ—è']}`\n"
            f"–ù–∞–∑–≤–∞          : `{json2['–ú–∞—Ä–∫–∞']} {json2['–ú–æ–¥–µ–ª—å']} {json2['–ù–æ–º–µ—Ä']} {json2['–í–æ–¥–∏—Ç–µ–ª—å']}`\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª   : `{protocol_name}`\n"
            f"EMEI            : `{json1['–ò–ú–ï–ò']}`\n"
            f"shortEMEI    : `{json1['–ò–ú–ï–ò'][-5:]}`\n"
            f"C—ñ–º               : `{sim}`\n\n"
            f"Errors:               : `{error_description}`\n"
            f"–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏      :  `{readable_time}`\n"
            f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: `{formatted_datetime}`\n"
            f"–ó–∞—Ç—Ä–∏–º–∫–∞          : `{delay}`\n"
            f"–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä            :  `{json2['—ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä']}`"
        )

        #–≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤ —á–∞—Ç –ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω—Ç–∞–∂—É
        bot.send_message(call.message.chat.id, formatted_message, parse_mode="MarkdownV2", message_thread_id=THREAD_ID)
        bot.delete_message(call.message.chat.id, old_message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é callback_data
def get_button_text_by_callback(callback_data, keyboard_data):
    for row in keyboard_data:
        for button in row:
            if button['callback_data'] == callback_data:
                return button['text']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    return None  # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

@bot.message_handler(commands=['get_chat_id'])
@check_permissions
def get_chat_id(message):
    bot.send_message(message.chat.id, f"Your chat ID is: {message.chat.id} thread = {message.message_thread_id}",
                     message_thread_id=message.message_thread_id)


@bot.message_handler(commands=['start'])
@check_permissions
def start(message):
    chat_type = message.chat.type
    if chat_type == "private":
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ–≥–æ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no","confirm_dismantle","cancel","yes_find"
                                                            ,"show_dismantling","show_mantling"
                                                            ,"approve_dismantle","decline_dismantle"])
@check_permissions
def handle_callback(call):
    print(f"call data = {call.data}")

    user_id = call.from_user.id

    if call.data == "yes_find" and user_state[user_id].get("wialon_json"):
        print(user_state)
        for index, item in enumerate(user_state[user_id].get("wialon_json")):
            if index == 10: break
            bot.send_message(call.message.chat.id, f"```\n{json.dumps(item, indent=4, ensure_ascii=False)}\n```",
                             parse_mode="MarkdownV2")

    elif call.data == "show_dismantling":

        for index, item in enumerate(user_state[user_id].get("wialon_json")):
            if index == 10: break
            bot.send_message(call.message.chat.id, f"```\n{json.dumps(item, indent=4, ensure_ascii=False)}\n```",
                             parse_mode="MarkdownV2")

    elif call.data == "show_mantling":

        for index, item in enumerate(user_state[user_id].get("excell_json")):
            if index == 10: break
            bot.send_message(call.message.chat.id, f"```\n{json.dumps(item, indent=4, ensure_ascii=False)}\n```",
                             parse_mode="MarkdownV2")

    elif call.data == "yes" and user_state[user_id].get("wialon_json"):

        count_items = len(user_state[user_id].get("wialon_json"))
        if count_items > 1:
            for item in user_state[user_id].get("wialon_json"):
                bot.send_message(call.message.chat.id, f"```\n{json.dumps(item, indent=4, ensure_ascii=False)}\n```",
                                 parse_mode="MarkdownV2")
            bot.send_message(call.message.chat.id,
                             f"IMEI –º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º, —è –∑–º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–µ–º–æ–Ω—Ç–∞–∂, —è–∫—â–æ –±—É–¥–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –æ–±'—î–∫—Ç")
            return

        #–æ–±–Ω—É–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
        user_state.pop(user_id, None)
        engineer_gps_search_menu()

    elif call.data in ["no", "cancel"]:
        # –æ–±–Ω—É–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
        user_state.pop(user_id, None)
        bot.send_message(call.message.chat.id, "–Ø–∫ –∑–∞–±–∞–∂–∞—î—Ç–µ.",reply_markup=engineer_gps_menu())
        return

    #–±–æ—Ç
    elif call.data == "confirm_dismantle":

        user_state.pop(user_id, None)
        message_text = call.message.text

        try:
            bot.send_message(ENGINEER_CHAT_ID, f"```\n{message_text}\n```" ,
                             parse_mode="MarkdownV2",
                             reply_markup=ask_approve_confirmation("approve_dismantle"),
                             message_thread_id=THREAD_ID)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç –∑ ID={ENGINEER_CHAT_ID} —Ç–∞ THREAD_ID={THREAD_ID}")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id,
                         f"```\n{message_text}\n```–î–µ–º–æ–Ω—Ç–∞–∂ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç",
                         parse_mode="MarkdownV2")

    #—á–∞—Ç
    elif call.data == "approve_dismantle":
        print(f"User : {call.from_user.id} name = {call.from_user.first_name} "
              f"push '{call.data}' "
              f"Chat ID '{call.message.chat.id}' "
              f"message_thread_id = {getattr(call.message, 'message_thread_id', 'No thread ID')}")

        # –ö–æ–ª–∏ –≤ —á–∞—Ç –ø–∞–¥–∞—î –∑–∞—è–≤–∫–∞, —Ç–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–ü–æ–≥–æ–¥–∏—Ç–∏"
        try:
            chat_member = bot.get_chat_member(call.message.chat.id, call.from_user.id)
            print(f"Role: {chat_member.status}")
            if chat_member.status not in ["administrator","creator"]:
                return
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            bot.send_message(call.message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–ª—ñ", message_thread_id=THREAD_ID)
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ  —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        old_message_id = call.message.message_id

        #print(call.message.text)
        # –∫–æ–Ω–≤–µ—Ä—Ç—É—ç–º–æ —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–Ω–∏–∫
        message_dict = json.loads(call.message.text)
        # –æ—Ç—Ä–∏–º—É—ç–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è  "nm"
        #nm_value = message_dict.get("nm")
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_time = call.message.date

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Unix timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        readable_time = datetime.fromtimestamp(message_time)
        #print(f"Value of 'nm': {nm_value}")

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        current_datetime = datetime.now()
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        formatted_datetime = current_datetime.strftime('%Y-%m-%d %H:%M:%S')
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        delay = current_datetime - readable_time

        formatted_message = (
            f"operation    : `{message_dict.get('operation')}`\n"
            f"–ù–∞–∑–≤–∞          : `{message_dict.get('nm')}`\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª   : `{message_dict.get('protocol')}`\n"
            f"EMEI            : `{message_dict.get('uid')}`\n"
            f"shortEMEI    : `{message_dict.get('uid')[-5:]}`\n" 
            f"C—ñ–º               : `{message_dict.get('ph')[-10:]}`\n\n"
            f"–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏      :  `{readable_time}`\n"
            f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: `{formatted_datetime}`\n"
            f"–ó–∞—Ç—Ä–∏–º–∫–∞          : `{delay}`\n"
            f"–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä            :  `{message_dict.get('creator')}`"
        )

        try:
            session = WialonManager(WIALON_URL, WIALON_TOKEN)
            #print(session._get_info())

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ EMEI
            my_json = session._get_list_universal("avl_unit",
                                            "sys_unique_id",
                                            f"*{message_dict.get('uid')}*",
                                            "sys_unique_id", 1, 1 + 256, 0, 10000)
            if not my_json['items']:
                print("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ EMEI")
                return
            id = my_json.get("items")[0].get("id")
            id_hv = my_json.get("items")[0].get('hw')
            #protocol = session._device_type(id_hv)

            #print(f"id = {id}")
            #print(f"id_hv = {id_hv}")
            #print(f"protocol = {protocol}")

            #–æ–±–Ω—É–ª—è—î–º–æ EMEI —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–ª–∏—à–∞—î–º–æ
            session._update_protocol_imei(id,id_hv,"")
            session._update_phone(id, "")
            # –¥–∏–≤–∏–º—Å—è –≤ —è–∫–∏—Ö –ø–∞–ø–∫–∞—Ö *–û–±—â–∞—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±—î–∫—Ç —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ
            session._add_in_history(my_json.get("items")[0].get("id"))
            #–≤–∏–¥–∞–ª—è—î–º–æ –æ–±'—î–∫—Ç –∑ —É—Å—ñ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –≥—Ä—É–ø–ø –∫—Ä—ñ–º *—ñ—Å—Ç–æ—Ä—ñ—è
            session._delete_obj_from_groups(id, "", "—ñ—Å—Ç–æ—Ä—ñ—è")
            print(f"–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π: {my_json.get("items")[0].get("nm")} ")
            print(my_json.get("items")[0])



        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

        bot.send_message(call.message.chat.id, formatted_message,parse_mode="MarkdownV2", message_thread_id=THREAD_ID)
        bot.delete_message(call.message.chat.id, old_message_id)

    elif call.data == "decline_dismantle":
        bot.delete_message(call.message.chat.id, call.message.message_id)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" –∫–Ω–æ–ø–∫–∏
    #bot.answer_callback_query(call.message.chat.id)

    # –æ–±–Ω—É–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
    user_state.pop(user_id, None)
    print(f"–û–±–Ω—É–ª—è—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_state}")

    bot.answer_callback_query(call.id)

# –æ–±—Ä–æ–±–æ—Ç—á–∏–∫, –¥–ª—è –º–µ–Ω—é, —è–∫–∏–π –ø–µ—Ä—à–∏–º –æ–±—Ä–æ–±–ª—é—ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: message.text in ['–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ö–æ–º–±–∞–π–Ω–∏'])
@check_permissions
def specific_handler(message):
    user_id = message.from_user.id
    user_state[user_id] = {'logistic_category': message.text}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å—Ç–µ—Ä:", reply_markup=logistic_inline_menu())
    #print(f"User ID: {user_id} –≤–∏–±—Ä–∞–≤ : {message.text}\nUser State : {user_state}")

# –æ–±—Ä–æ–±–æ—Ç—á–∏–∫, –¥–ª—è –º–µ–Ω—é, —è–∫–∏–π –≤–∏–±–∏—Ä–∞—î –∫–ª–∞—Å—Ç–µ—Ä
@bot.callback_query_handler(func=lambda call: call.data in ['–ß–Ü–ú–ö', '–°–ê', '–ê–ü', '–ë–ê', '–ê–ö', '–Ü–ú–ö'])
@check_permissions
def cluster_handler(call):
    user_id = call.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–≤ User –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    if user_id not in user_state or 'logistic_category' not in user_state[user_id]:
        # –Ø–∫—â–æ –≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –ø–µ—Ä–µ–∫–∏–¥–∞—î–º –Ω–∞ –º–µ–Ω—é –ª–æ–≥—ñ—Å—Ç–∏–∫–∏
        bot.send_message(call.message.chat.id, "–ü–æ—Ä—É—à–µ–Ω–∞ —á–µ—Ä–≥–∞ –≤–∏–±–æ—Ä—É. –ü–æ—á–Ω—ñ—Ç—å –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                         reply_markup=main_menu())
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    category = user_state[user_id]['logistic_category']
    cluster = call.data
    print(f"category = {category}")
    print(f"cluster = {cluster}")

    bot.send_message(call.message.chat.id, f"–í–∏ –≤–∏–±—Ä–∞–ª–∏:\n {category} => {cluster}\n\n"
                                           f"–ù–∞–∂–∞–ª—å, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —á–∏ –ø—Ä–∞—Ü—é—î —Ç–µ—Ö–Ω—ñ–∫–∞ –Ω–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ(\n"
                                           f"–Ø —Ç—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑—É—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ—Ö–Ω—ñ–∫–∏ –≤ –¥–∞–Ω—ñ–π –≥—Ä—É–ø–ø—ñ.\n\n"
                                           f"–Ø —Ä–æ–±–ª—é –∞–Ω–∞–ª—ñ–∑, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...‚è≥")

    bot.answer_callback_query(call.id)

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    print(f"answer {generate_answer(category, cluster)}")
    try:
        session = WialonManager(WIALON_URL, WIALON_TOKEN)
        print(session._get_info())
        print(generate_answer(category, cluster))
        json = session._create_my_json(generate_answer(category, cluster))
        # —Ä–∞—Ö—É—î–º–æ –∫-—Ç—å –æ–±—î–∫—Ç—ñ–≤ –≤ –≥—Ä—É–ø—ñ, —â–æ –Ω–∞–ª–∞–∂–∞—Ç—å —Ä—ñ–∑–Ω–∏–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        count_objects = len(json["items"])
        item_count_chimc = 0
        item_count_ba = 0
        item_count_sa = 0
        item_count_ak = 0
        item_count_ap = 0
        item_nobody = 0
        count_other_clusters = 0
        count_rental = 0

        for item in json["items"].values():
            if "_" in item["nm"]:
                count_rental += 1
            if not item.get("property"):
                item_nobody = item_nobody + 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–¢–û–í –ß–Ü–ú–ö":
                item_count_chimc = item_count_chimc + 1
                if cluster != "–ß–Ü–ú–ö": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–¢–û–í –ë—É—Ä–∞—Ç –ê–≥—Ä–æ":
                item_count_ba = item_count_ba + 1
                if cluster != "–ë–ê": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–ü–ü –ê–≥—Ä–æ–ø—Ä–æ–≥—Ä–µ—Å":
                item_count_ap = item_count_ap + 1
                if cluster != "–ê–ü": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–ü–°–ü –°–ª–æ–±–æ–∂–∞–Ω—â–∏–Ω–∞ –ê–≥—Ä–æ":
                item_count_sa = item_count_sa + 1
                if cluster != "–°–ê": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–¢–û–í –ê–≥—Ä–æ–∫—ñ–º":
                item_count_ak = item_count_ak + 1
                if cluster != "–ê–ö": count_other_clusters += 1

        # –∑–∞–ø–æ–≤–Ω—é—î–º–æ —à–∞–±–ª–æ–Ω
        message_values = {
            "cluster_name": generate_answer(category, cluster),
            "cluster_count": count_objects,  # –ø–æ—Ñ—ñ–∫—Å–∏—Ç—å –≤–∏–±—ñ—Ä
            "count_cluster": item_count_chimc,
            "count_rental": count_rental,
            "other_clusters": count_other_clusters,  # –ø–æ—Ñ—ñ–∫—Å–∏—Ç—å –≤–∏–±—ñ—Ä
            "cluster_chimc": item_count_chimc if cluster != "–ß–Ü–ú–ö" else 0,
            "cluster_ba": item_count_ba if cluster != "–ë–ê" else 0,
            "cluster_ak": item_count_ak if cluster != "–ê–ö" else 0,
            "cluster_sa": item_count_sa if cluster != "–°–ê" else 0,
            "cluster_ap": item_count_ap if cluster != "–ê–ü" else 0,
        }

        formatted_message = LOGISTIC_MESSAGE_STATUS.format(**message_values)

        bot.send_message(call.message.chat.id, f"–Ø –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–ø–∏—Ç {generate_answer(category, cluster)}")
        bot.send_message(call.message.chat.id, formatted_message)


    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!: {e}")

    # –æ–±–Ω—É–ª—è—î–º –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
    user_state.pop(user_id, None)


@bot.message_handler(func=lambda message: message.chat.type ==  'private')
@check_permissions
def menu_handler(message):
    if message.text == '–¢–µ—Å—Ç':
        bot.send_message(message.chat.id,  "–¢–µ—Å—Ç–æ–≤–∞ —Ñ-—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å", reply_markup=test_function(message))
        return
    if message.text == '–ú–µ–Ω—é –ø–æ—à—É–∫—É':
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—à—É–∫—É:", reply_markup=engineer_gps_search_menu())
    elif message.text == '–õ–æ–≥—ñ—Å—Ç–∏–∫–∞':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=logistic_group_menu())
    elif message.text == '–Ü–Ω–∂–µ–Ω–µ—Ä GPS':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=engineer_gps_menu())
    elif message.text == '–¢–∞—Ä—É–≤–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=fueltable_menu())
    elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=fueltable_convert_menu())
    elif message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç ü§ñ':
        bot.send_message(message.chat.id, "–ê —è –≤–∞–º –ø–∞–∫–∞–∂—É –æ—Ç–∫—É–¥–∞–≤–∞ –≥–æ—Ç–æ–≤—ñ–ª–æ—Å—å –Ω–∞–ø–∞–¥—î–Ω—ñ—î")
    elif message.text == '–ü–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ä–∂ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –°–í1234–ï–ê:")
        bot.register_next_step_handler(message, find_function)

    elif message.text == '–ü–æ EMEI':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å EMEI –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—ñ 4 —Ü–∏—Ñ—Ä–∏")
        bot.register_next_step_handler(message, find_emei_function)

    elif message.text == '–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ EMEI':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å EMEI –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–±–æ —á–∞—Å—Ç–∏–Ω—É:")
        bot.register_next_step_handler(message, dismantling_emei_equipment)

    elif message.text in ['–ó–∞–º—ñ–Ω–∞ SIM','–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É']:
        bot.send_message(message.chat.id, "–í –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–∑—Ä–æ–±–∫–∏")

    elif message.text in '–ú–æ–Ω—Ç–∞–∂':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å EMEI –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–±–æ —á–∞—Å—Ç–∏–Ω—É:")
        bot.register_next_step_handler(message, mantling_emei_equipment)

    elif message.text in '–î–µ–º–æ–Ω—Ç–∞–∂':
        bot.send_message(message.chat.id, "–ú–µ–Ω—é –¥–µ–º–æ–Ω—Ç–∞–∂—É", reply_markup=dismantling_gps_menu())

    elif message.text =='–ü–æ SIM':
        bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—ñ–º–∫–∞—Ä—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É:\n –§–æ—Ä–º–∞—Ç –ø–æ—à—É–∫—É: 0671234567\n")
        bot.register_next_step_handler(message, find_sim_function)

    elif message.text == '–†–µ–±—É—Ç':
        bot.send_message(message.chat.id, "–ü–æ—á–∏–Ω–∞—é —á–∏—Å—Ç–∫—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–µ—Ä–µ–ø–∏—Å–∫–∏.")
        bot.send_message(message.chat.id, f"/start")

    elif message.text == '–î–£-02 => Wialon.cvs':
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑ —Å–æ—Ñ—Ç—É –î–£-02, —è –π–æ–≥–æ –ø–µ—Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç—É—é —Ç–∞ "
                                          "–ø–æ–≤–µ—Ä–Ω—É —à–∞–±–ª–æ–Ω —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è Wialon –≤ —Ñ–æ—Ä–º–∞—Ç—ñ *.cvs")
        bot.register_next_step_handler(message, wait_for_file_DU02)
    elif message.text == 'Bitrek Sensor => Wialon.cvs':
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑ —Å–æ—Ñ—Ç—É Bitrek Sensor, —è –π–æ–≥–æ –ø–µ—Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç—É—é —Ç–∞ "
                                          "–ø–æ–≤–µ—Ä–Ω—É —à–∞–±–ª–æ–Ω —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è Wialon –≤ —Ñ–æ—Ä–º–∞—Ç—ñ *.cvs")
        bot.register_next_step_handler(message, wait_for_file_BISensor)
    elif message.text == 'TEST':
        bot.send_message(message.chat.id,
                         '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ç–µ—Å—Ç–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó, –∫–∏–Ω—å—Ç–µ —è–∫–µ—Å—å üí©, —â–æ–± –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:')
        bot.register_next_step_handler(message, test_function)

    elif message.text == '<-–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

    else:
        print(message.chat.type)
        bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

def find_emei_function(message):
    #—è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if message.text.isdigit():
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞–ø—É—â–µ–Ω–∞")

        file_excel = ExcellLoader()
        json_list = file_excel.create_base_list()

        result = file_excel.find_emei(message.text, json_list)
        if len(result) > 5:
            bot.send_message(message.chat.id, f"–Ø –∑–Ω–∞–π—à–æ–≤ {len(result)} ! \n–í–∏–≤–µ–¥—É —Ç—ñ–ª—å–∫–∏ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ\n"
                                              f" {message.text} –≤ –∫—ñ–Ω—Ü—ñ EMEI, —è–∫—â–æ –∑–Ω–∞–π–¥—É —Ç–∞–∫–∏–π."
                                              "\n–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –±—ñ–ª—å—à–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
        result_json = {"Excell":result[:1]}
        bot.send_message(message.chat.id, f"```\n{json.dumps(result_json, indent=4, ensure_ascii=False)}\n```",parse_mode="MarkdownV2")

    else:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∞ —è–∫—É—Å—å –±–µ–ª—ñ–±–µ—Ä–¥—É.")

def mantling_emei_equipment(message):

    if message.text.isdigit():
        #bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫")
        text2 = {
            "–û–ø–µ—Ä–∞—Ü—ñ—è": "",
            "–ö–ª–∞—Å—Ç–µ—Ä": "",
            "–í–ª–∞—Å–Ω—ñ—Å—Ç—å": "",
            "–ì—Ä—É–ø–∞": "",
            "–ü—ñ–¥–≥—Ä—É–ø–∞": "",
            "–ú–∞—Ä–∫–∞": "",
            "–ú–æ–¥–µ–ª—å": "",
            "–ù–æ–º–µ—Ä": "",
            "–í–æ–¥–∏—Ç–µ–ª—å": "",
            "—ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä": ""
        }
        try:
            file_excel = ExcellLoader()
            json_list = file_excel.create_base_list()

            result = file_excel.find_emei(message.text, json_list)


            for item in result:
                del item["–°–∫–ª–∞–¥"]
            #print(json.dumps(result, indent=4, ensure_ascii=False))


            if len(result) > 1:
                ask_confirmation(message, len(result),
                                 "\n–Ø –∑–º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –º–æ–Ω—Ç–∞–∂ —Ç—ñ–ª—å–∫–∏ –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ EMEI —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π.\n"
                                 "–Ü–Ω–∞–∫—à–µ –≤–∏–≤–µ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 10!", "mantling")
                user_state[message.from_user.id] = {
                    'excell_json': result}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ list_json –≤ —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç–∞–Ω—ñ–≤

            if len(result) == 1:

                #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–∞–∫–∏–π –µ–º–µ–π —É –í—ñ–∞–ª–æ–Ω—ñ
                try:
                    info_wialon = WialonManager(WIALON_URL,WIALON_TOKEN)
                    #–ü–µ—Ä–µ–≤—ñ—Ä—è—ç–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å EMEI —É Wialon
                    id = info_wialon._get_id_from_uid(result[0].get('–ò–ú–ï–ò'))
                    print(id)
                    if id:
                        #–Ø–∫—â–æ —î —Ç–æ –≤–∏–≤–æ–¥–∏–º–æ –≤ –±–æ—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ–π –æ–±—î–∫—Ç –∑ EMEI —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –º–æ–Ω—Ç–∞–∂—É
                        print(info_wialon._get_info_from_telegram(id))
                        bot.send_message(message.chat.id,
                                         f"```\n{json.dumps(info_wialon._get_info_from_telegram(id),
                                                            indent=4, ensure_ascii=False)}\n"
                                         f"```–Ø –Ω–µ –º–æ–∂—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑—Ä–æ–±–∏—Ç–∏ –º–æ–Ω—Ç–∞–∂, –±–æ —Ç–∞–∫–∏–π IMEI —É–∂–µ —î –≤ Wialon",
                                         parse_mode="MarkdownV2")
                        return

                except Exception as e:
                    bot.send_message(message.chat.id,f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É EMEI —É –í—ñ–∞–ª–æ–Ω—ñ: {e}")
                    return


                formatted_text = (f"```\n{json.dumps(result[0], indent=4, ensure_ascii=False)}\n```\n"
                                  f"\n```\n{json.dumps(text2, indent=4, ensure_ascii=False)}\n```")

                #–í–∏–≤–æ–¥–∏–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –ø–æ –º–æ–Ω—Ç–∞–∂—É –≤ –±–æ—Ç –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
                keyboard = mantle_stage_1_inline_keyboard()
                bot.send_message(
                                    message.chat.id,
                                    formatted_text,
                                    parse_mode = "MarkdownV2",
                                    reply_markup=keyboard
                                 )

            if len(result) == 0:
                bot.send_message(message.chat.id, "–Ø –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                return


        except Exception as e:
            print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")


    else:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∞ —è–∫—É—Å—å –±–µ–ª—ñ–±–µ—Ä–¥—É.")

def dismantling_emei_equipment(message):
    if message.text.isdigit():
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫")

        try:
            session = WialonManager(WIALON_URL,WIALON_TOKEN)
            print(f"{message.from_user.id} create session:\n{session._get_info()}")


            myjson = session._get_json_uid_for_emei(message.text)
            count_obj = len(myjson["wialon"])
            print(f"–ù–∞–π–¥–µ–Ω–æ {count_obj} –æ–±'—î–∫—Ç—ñ–≤")

            if len(myjson["wialon"]) >1:
                ask_confirmation(message, count_obj, "\n–Ø –∑–º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–µ–º–æ–Ω—Ç–∞–∂ —Ç—ñ–ª—å–∫–∏ –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ EMEI —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π.\n"
                                                     "–Ü–Ω–∞–∫—à–µ –≤–∏–≤–µ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 10!","dismantling")
                user_state[message.from_user.id] = {
                    'wialon_json': myjson["wialon"]}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ list_json –≤ —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç–∞–Ω—ñ–≤

            if len(myjson["wialon"]) ==1:
                myjson["wialon"][0] = {"operation": "–¥–µ–º–æ–Ω—Ç–∞–∂", "creator": message.from_user.username, **myjson["wialon"][0] }
                bot.send_message(message.chat.id,
                                 f"```\n{json.dumps(myjson["wialon"][0], 
                                    indent=4, ensure_ascii=False)}\n```",
                                     parse_mode = "MarkdownV2",
                                 reply_markup=ask_approve_confirmation("confirm_dismantle"))

                user_state[message.from_user.id] = {
                    'wialon_json': myjson["wialon"]}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ list_json –≤ —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç–∞–Ω—ñ–≤

            if len(myjson["wialon"]) ==0:
                bot.send_message(message.chat.id, "–Ø –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")

        except Exception as e:
            print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")


    else:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∞ —è–∫—É—Å—å –±–µ–ª—ñ–±–µ—Ä–¥—É.")

def find_sim_function(message):
    # —è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if message.text.isdigit():
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞–ø—É—â–µ–Ω–∞")

        file_excel = ExcellLoader()
        json_list = file_excel.create_base_list()

        result = file_excel.find_sim(message.text, json_list)
        print(result)
        if len(result) > 5:
            bot.send_message(message.chat.id, f"–Ø –∑–Ω–∞–π—à–æ–≤ {len(result)} —ñ –≤–∏–≤–µ–¥—É —Ç—ñ–ª—å–∫–∏ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ\n"
                                              f" {message.text} —î –≤ –ø–æ–ª—ñ Sim'."
                                              "\n–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –±—ñ–ª—å—à–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
        result_json = {"Excell":result[:1]}
        bot.send_message(message.chat.id, f"```\n{json.dumps(result_json, indent=4, ensure_ascii=False)}\n```",
                         parse_mode="MarkdownV2")

def find_function(message):

    if message.text == "<-–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é", reply_markup=engineer_gps_menu())
    if message.text in ["–ü–æ EMEI", "–ü–æ SIM", "–ü–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É"]:
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É!\n–í–∏–±–µ—Ä—ñ—Ç—å –∑–Ω–æ–≤—É –∫—Ä–∏—Ç–µ—Ä—ñ–π –ø–æ—à—É–∫—É.")
        return
    plate_number = message.text.strip().upper()
    bot.send_message(message.chat.id, f"–í–∏ –≤–≤–µ–ª–∏ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä = {plate_number}")

    # —Ç—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–µ—Ä–∂–Ω–æ–º–µ—Ä–∞
    if (plate_number == "ALL" or
            (len(plate_number) == 8 and
             plate_number[:2].isalpha() and
             plate_number[2:6].isdigit() and
             plate_number[6:].isalpha()) or
            (len(plate_number) == 7 and
             plate_number[:5].isdigit() and
             plate_number[5:].isalpha())):
        bot.send_message(message.chat.id, f"–î–µ—Ä–∂ –Ω–æ–º–µ—Ä {plate_number} –ø—Ä–∏–π–Ω—è—Ç–æ!")


        session = WialonManager(WIALON_URL, WIALON_TOKEN)
        #print(session._get_info())


        my_json = session._get_list_universal("avl_unit",
                                              "sys_name",
                                              f"*{plate_number}*",
                                              "sys_name", 1, 1 + 256 + 1024 + 4096 + 2097152, 0, 10000)

        if len(my_json['items']) == 0:
            bot.send_message(message.chat.id, f"–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –¥–µ—Ä–∂.–Ω–æ–º–µ—Ä–∞")
            main_menu()
            return
        ask_confirmation(message,len(my_json['items']),"", "find")

        user_state[message.from_user.id] = {'wialon_json': session._get_special_list_json(my_json)}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ list_json –≤ —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç–∞–Ω—ñ–≤
        #print(f"user state = \n{json.dumps(user_state[message.from_user.id], indent=4, ensure_ascii=False)}")

    else:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç." ,reply_markup=engineer_gps_search_menu())

def generate_answer(category, cluster):
    match (category, cluster):
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ê–ü'):
            return "–ê–ü –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ê–ö'):
            return "–ê–ö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–°–ê'):
            return "–°–ê –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ë–ê'):
            return "–ë–ê –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ß–Ü–ú–ö'):
            return "–ß–Ü–ú–ö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–Ü–ú–ö'):
            return "–Ü–ú–ö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case _:
            return None

def wait_for_file_BISensor(message):
    """
       –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –±—ñ—Ç—Ä–µ–∫ –¥—É—Ç—ñ–≤ –≤—ñ–¥ Bitrek
       1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª.xls
       2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
       3. –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª.csv –¥–ª—è Wialon Local
       4.–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Ñ–∞–π–ª.xls –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
       5.–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª.csv –≤ –±–æ—Ç

       :param message: –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞
       :return: None
       """
    try:
        if ((message.content_type == 'document')
                and (message.document.mime_type == 'application/x-msexcel')
                and ("xls" in message.document.file_name)):
            bot.send_message(message.chat.id, f"–§–∞–π–ª {message.document.file_name}  –û—Ç—Ä–∏–º–∞–≤. –ü–æ—á–∏–Ω–∞—é –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é ‚è≥")

            converter = FileManager(message, bot)
            converter.save_file_bitrek_excell()
            if not converter._get_table_dut():
                bot.send_message(message.chat.id, "–§–∞–π–ª –ø—É—Å—Ç–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
                return

            temp_file = converter._get_file_to_chat(converter._get_table_dut())
            file_name_to_save = message.document.file_name.rsplit('.', 1)[0] + ".csv"
            bot.send_document(message.chat.id, temp_file[1],
                              caption=f"–¢—É—Ç –º–∞–ª–∞ –±–∏ –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞—Ä—É–≤–∞–Ω–Ω—è, –∞–ª–µ –Ω–∞–∂–∞–ª—å, —ó—ó –Ω–µ –º–∞—î",
                              visible_file_name=file_name_to_save)

            bot.send_message(message.chat.id, "–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø—ñ—à–Ω–æ!", reply_markup=main_menu())
        elif message.text == '<-–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())
        else:
            # –Ø–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–∞–π–ª –∞ —â–æ—Å—å —ñ–Ω—à–µ
            bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–∏–Ω—å —Ç–∞—Ä—É–≤–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é *.xls")
            bot.register_next_step_handler(message, wait_for_file_BISensor)  # –ß–µ–∫–∞—î–º –∑–Ω–æ–≤—É —Ñ–∞–π–ª
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

# –û–±—Ä–æ–±–∫–∞ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –î–£-02
def wait_for_file_DU02(message):
    """
       \–§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –¥—É—Ç—ñ–≤ –î–£-02
       1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª.txt
       2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É, –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
       3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª.csv –¥–ª—è Wialon Local
       4.–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª.csv –≤ –±–æ—Ç –∑ –î–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç–∞—Ä—É–≤–∞–Ω–Ω—è
       :param message: –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞
       :return: None
       """

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–æ–∫—É–º–µ–Ω—Ç) —Ç–∞ –Ω–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .txt
    if (message.content_type == 'document') and (message.document.mime_type == 'text/plain'):

        file_name = message.document.file_name
        bot.send_message(message.chat.id, f"–§–∞–π–ª {file_name}  –û—Ç—Ä–∏–º–∞–≤. –ü–æ—á–∏–Ω–∞—é –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é ‚è≥")

        try:
            converter = FileManager(message, bot)
            converter._downloadfile()
            converter._extract_table_du02()
            if not converter._get_table_dut():
                bot.send_message(message.chat.id, "–§–∞–π–ª –ø—É—Å—Ç–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
                return
            temp_file = converter._get_file_to_chat(converter._get_table_dut())

            json_data = json.dumps(converter._get_info_for_save(), indent=4, ensure_ascii=False)
            # json_data = "\n".join([f"*{key}:*\n{value}" for key, value in converter._get_info_for_save().items()])

            bot.send_document(message.chat.id, temp_file[1],
                              caption=f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é: ```json\n{json_data}\n``` ", parse_mode="MarkdownV2",
                              visible_file_name=(lambda info: f"{info['–ê–≤—Ç–æ–º–æ–±–∏–ª—å']} {info['–ì–æ—Å. –Ω–æ–º–µ—Ä']}")(
                                  converter._get_info_for_save()) + ".csv"
                              )
            bot.send_message(message.chat.id, "–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø—ñ—à–Ω–æ!", reply_markup=main_menu())
        except:
            bot.send_message(message.chat.id, "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞")

    elif message.text == '<-–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())
    else:
        # –Ø–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–∞–π–ª –∞ —â–æ—Å—å —ñ–Ω—à–µ
        bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–∏–Ω—å —Ç–∞—Ä—É–≤–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é *.txt")
        bot.register_next_step_handler(message, wait_for_file_DU02)  # –ß–µ–∫–∞—î–º –∑–Ω–æ–≤—É —Ñ–∞–π–ª


bot.polling(none_stop=True)
