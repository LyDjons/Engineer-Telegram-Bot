from time import sleep

from openpyxl.descriptors import String
from openpyxl.xml.functions import tostring

from fileeditor.FileManager import FileManager
from config.config import TELEGRAM_TOKEN, WIALON_URL
from config.config import WIALON_TOKEN
from telebot import types
from WialonLocal.WialonManager import WialonManager
import telebot
import json
from WialonLocal.templates.Templates import LOGISTIC_MESSAGE_STATUS

bot = telebot.TeleBot(TELEGRAM_TOKEN)
# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é Users
user_state = {}


# –ì–æ–ª–æ–≤–Ω–Ω–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è')
    btn2 = types.KeyboardButton('–¢–∞—Ä—É–≤–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è')
    btn3 = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç ü§ñ')
    btn4 = types.KeyboardButton('–õ–æ–≥—ñ—Å—Ç–∏–∫–∞')
    btn5 = types.KeyboardButton('–Ü–Ω–∂–µ–Ω–µ—Ä GPS')
    clear_button = types.KeyboardButton("–†–µ–±—É—Ç")
    markup.add(btn1, btn4)
    markup.add(btn2, btn5)
    markup.add(clear_button, btn3)
    return markup

# –ü—ñ–¥–º–µ–Ω—é –¥–ª—è –ø–æ—à—É–∫—É
def logistic_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í–∞–Ω—Ç–∞–∂–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
    btn2 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    return markup


# –ú–µ–Ω—é —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
def fueltable_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å')
    btn2 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    return markup


# –ú–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
def fueltable_convert_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–£-02 => Wialon.cvs')
    btn2 = types.KeyboardButton('Bitrek Sensor => Wialon.cvs')
    btn_test = types.KeyboardButton("TEST")
    btn3 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add(btn_test, btn3)
    return markup


def logistic_inline_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)  # row_width=2 —Å–¥–µ–ª–∞–µ—Ç –¥–≤–∞ —Å—Ç–æ–ª–±–∏–∫–∞
    btn1 = types.InlineKeyboardButton('–ß–Ü–ú–ö', callback_data='–ß–Ü–ú–ö')
    btn2 = types.InlineKeyboardButton('–°–ê', callback_data='–°–ê')
    btn3 = types.InlineKeyboardButton('–ê–ü', callback_data='–ê–ü')
    btn4 = types.InlineKeyboardButton('–ë–ê', callback_data='–ë–ê')
    btn5 = types.InlineKeyboardButton('–ê–ö', callback_data='–ê–ö')
    btn6 = types.InlineKeyboardButton('–Ü–ú–ö', callback_data='–Ü–ú–ö')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return markup


def logistic_group_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
    btn2 = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    return markup

def engineer_gps_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú–µ–Ω—é –ø–æ—à—É–∫—É')
    btn2 = types.KeyboardButton('–ú–æ–Ω—Ç–∞–∂')
    btn3 = types.KeyboardButton('–î–µ–º–æ–Ω—Ç–∞–∂')
    btn4 = types.KeyboardButton('–ó–∞–º—ñ–Ω–∞ SIM')
    back = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add(btn4, btn3)
    markup.add(back)
    return markup

def engineer_gps_search_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É')
    btn2 = types.KeyboardButton('–ü–æ EMEI')
    btn3 = types.KeyboardButton('–ü–æ SIM')
    back = types.KeyboardButton('<-–ù–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    markup.add(btn3, back)
    return markup

def ask_confirmation(message, count:int):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    markup = types.InlineKeyboardMarkup()
    button_yes = types.InlineKeyboardButton("–¢–ê–ö", callback_data="yes")
    button_no = types.InlineKeyboardButton("–ù–Ü", callback_data="no")
    markup.add(button_yes, button_no)

    bot.send_message(message.chat.id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ {count} –æ–±'—î–∫—Ç—ñ–≤. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?", reply_markup=markup)


def test_function(message):
    bot.send_message(message.chat.id, f"–¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è. –¢—É—Ç –Ω—ñ—á–æ –Ω–µ–º–∞—î, —Ç—ñ–ª—å–∫–∏ –∫–≤–∞–¥—Ä–æ–±–æ–±–µ—Ä–∏")

@bot.message_handler(commands=['start'])
def start(message):
    chat_type = message.chat.type
    if chat_type == "private":
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ–≥–æ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=main_menu())


@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"])
def handle_callback(call):
    # –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±–æ—Ä—É –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –¥—ñ—ó
    user_id = call.from_user.id
    if call.data == "yes" and user_state[user_id].get("wialon_json"):
        #bot.send_message(call.message.chat.id, f"```\n{user_state[user_id].get("wialon_json")}\n```", parse_mode="MarkdownV2")

        for i in user_state[user_id].get("wialon_json"):
            bot.send_message(call.message.chat.id, f"```\n{json.dumps(i, indent=4, ensure_ascii=False)}\n```", parse_mode="MarkdownV2")

        #–æ–±–Ω—É–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
        user_state.pop(user_id, None)
        engineer_gps_search_menu()
    elif call.data == "no":
        # –æ–±–Ω—É–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
        user_state.pop(user_id, None)
        bot.send_message(call.message.chat.id, "–Ø–∫ –∑–∞–±–∞–∂–∞—î—Ç–µ.",reply_markup=engineer_gps_menu())
        return
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id)

# –æ–±—Ä–æ–±–æ—Ç—á–∏–∫, –¥–ª—è –º–µ–Ω—é, —è–∫–∏–π –ø–µ—Ä—à–∏–º –æ–±—Ä–æ–±–ª—é—ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: message.text in ['–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ö–æ–º–±–∞–π–Ω–∏'])
def specific_handler(message):
    user_id = message.from_user.id
    user_state[user_id] = {'logistic_category': message.text}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å—Ç–µ—Ä:", reply_markup=logistic_inline_menu())
    #print(f"User ID: {user_id} –≤–∏–±—Ä–∞–≤ : {message.text}\nUser State : {user_state}")


# –æ–±—Ä–æ–±–æ—Ç—á–∏–∫, –¥–ª—è –º–µ–Ω—é, —è–∫–∏–π –≤–∏–±–∏—Ä–∞—î –∫–ª–∞—Å—Ç–µ—Ä
@bot.callback_query_handler(func=lambda call: call.data in ['–ß–Ü–ú–ö', '–°–ê', '–ê–ü', '–ë–ê', '–ê–ö', '–Ü–ú–ö'])
def cluster_handler(call):
    user_id = call.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–≤ User –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    if user_id not in user_state or 'logistic_category' not in user_state[user_id]:
        # –Ø–∫—â–æ –≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –ø–µ—Ä–µ–∫–∏–¥–∞—î–º –Ω–∞ –º–µ–Ω—é –ª–æ–≥—ñ—Å—Ç–∏–∫–∏
        bot.send_message(call.message.chat.id, "–ü–æ—Ä—É—à–µ–Ω–∞ —á–µ—Ä–≥–∞ –≤–∏–±–æ—Ä—É. –ü–æ—á–Ω—ñ—Ç—å –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                         reply_markup=main_menu())
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    category = user_state[user_id]['logistic_category']
    cluster = call.data
    print(f"category = {category}")
    print(f"cluster = {cluster}")

    bot.send_message(call.message.chat.id, f"–í–∏ –≤–∏–±—Ä–∞–ª–∏:\n {category} => {cluster}\n\n"
                                           f"–ù–∞–∂–∞–ª—å, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —á–∏ –ø—Ä–∞—Ü—é—î —Ç–µ—Ö–Ω—ñ–∫–∞ –Ω–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ(\n"
                                           f"–Ø —Ç—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑—É—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ—Ö–Ω—ñ–∫–∏ –≤ –¥–∞–Ω—ñ–π –≥—Ä—É–ø–ø—ñ.\n\n"
                                           f"–Ø —Ä–æ–±–ª—é –∞–Ω–∞–ª—ñ–∑, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...‚è≥")

    bot.answer_callback_query(call.id)
    # —Ç—É—Ç –º–∞—î —â–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—å

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    try:
        session = WialonManager(WIALON_URL, WIALON_TOKEN)
        print(call.message)
        print(session._get_info())
        print(generate_answer(category, cluster))
        json = session._create_my_json(generate_answer(category, cluster))

        # —Ä–∞—Ö—É—î–º–æ –∫-—Ç—å –æ–±—î–∫—Ç—ñ–≤ –≤ –≥—Ä—É–ø—ñ, —â–æ –Ω–∞–ª–∞–∂–∞—Ç—å —Ä—ñ–∑–Ω–∏–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        count_objects = len(json["items"])
        item_count_chimc = 0
        item_count_ba = 0
        item_count_sa = 0
        item_count_ak = 0
        item_count_ap = 0
        item_nobody = 0
        count_other_clusters = 0
        count_rental = 0

        for item in json["items"].values():
            if "_" in item["nm"]:
                count_rental += 1
            if not item.get("property"):
                item_nobody = item_nobody + 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–¢–û–í –ß–Ü–ú–ö":
                item_count_chimc = item_count_chimc + 1
                if cluster != "–ß–Ü–ú–ö": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–¢–û–í –ë—É—Ä–∞—Ç –ê–≥—Ä–æ":
                item_count_ba = item_count_ba + 1
                if cluster != "–ë–ê": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–ü–ü –ê–≥—Ä–æ–ø—Ä–æ–≥—Ä–µ—Å":
                item_count_ap = item_count_ap + 1
                if cluster != "–ê–ü": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–ü–°–ü –°–ª–æ–±–æ–∂–∞–Ω—â–∏–Ω–∞ –ê–≥—Ä–æ":
                item_count_sa = item_count_sa + 1
                if cluster != "–°–ê": count_other_clusters += 1
            if item.get("property", {}).get("–í–ª–∞—Å–Ω—ñ—Å—Ç—å") == "–¢–û–í –ê–≥—Ä–æ–∫—ñ–º":
                item_count_ak = item_count_ak + 1
                if cluster != "–ê–ö": count_other_clusters += 1

        # –∑–∞–ø–æ–≤–Ω—é—î–º–æ —à–∞–±–ª–æ–Ω
        message_values = {
            "cluster_name": generate_answer(category, cluster),
            "cluster_count": count_objects,  # –ø–æ—Ñ—ñ–∫—Å–∏—Ç—å –≤–∏–±—ñ—Ä
            "count_cluster": item_count_chimc,
            "count_rental": count_rental,
            "other_clusters": count_other_clusters,  # –ø–æ—Ñ—ñ–∫—Å–∏—Ç—å –≤–∏–±—ñ—Ä
            "cluster_chimc": item_count_chimc if cluster != "–ß–Ü–ú–ö" else 0,
            "cluster_ba": item_count_ba if cluster != "–ë–ê" else 0,
            "cluster_ak": item_count_ak if cluster != "–ê–ö" else 0,
            "cluster_sa": item_count_sa if cluster != "–°–ê" else 0,
            "cluster_ap": item_count_ap if cluster != "–ê–ü" else 0,
        }

        formatted_message = LOGISTIC_MESSAGE_STATUS.format(**message_values)

        bot.send_message(call.message.chat.id, f"–Ø –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–ø–∏—Ç {generate_answer(category, cluster)}")
        bot.send_message(call.message.chat.id, formatted_message)

    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!: {e}")

    # –æ–±–Ω—É–ª—è—î–º –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ—Å—Ç–æ—Ä—ñ—é –π–æ–≥–æ –≤–∏–±–æ—Ä—ñ–≤ –≤ –º–µ–Ω—é)
    user_state.pop(user_id, None)



@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    if message.text == '–ú–µ–Ω—é –ø–æ—à—É–∫—É':
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—à—É–∫—É:", reply_markup=engineer_gps_search_menu())
    elif message.text == '–õ–æ–≥—ñ—Å—Ç–∏–∫–∞':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=logistic_group_menu())
    elif message.text == '–Ü–Ω–∂–µ–Ω–µ—Ä GPS':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=engineer_gps_menu())
    elif message.text == '–¢–∞—Ä—É–≤–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=fueltable_menu())
    elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å':
        bot.send_message(message.chat.id, "–ó—Ä–æ–±—ñ—Ç—å –≤–∞—à –≤–∏–±—ñ—Ä:", reply_markup=fueltable_convert_menu())
    elif message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç ü§ñ':
        bot.send_message(message.chat.id, "–ê —è –≤–∞–º –ø–∞–∫–∞–∂—É –æ—Ç–∫—É–¥–∞–≤–∞ –≥–æ—Ç–æ–≤—ñ–ª–æ—Å—å –Ω–∞–ø–∞–¥—î–Ω—ñ—î")
    elif message.text == '–ü–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ä–∂ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –°–í1234–ï–ê:")
        #—Å–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞–ø—É—Å–∫ reply_markup –∞ –ø–æ—Ç—ñ–º —Ç–µ–∫—Å—Ç_–º–µ—Å—Å–µ–Ω–¥–∂
        bot.register_next_step_handler(message, find_function)


    elif message.text in ['–ú–æ–Ω—Ç–∞–∂', '–î–µ–º–æ–Ω—Ç–∞–∂', '–ó–∞–º—ñ–Ω–∞ SIM', '–ü–æ EMEI', '–ü–æ SIM']:
        bot.send_message(message.chat.id, "–í –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–∑—Ä–æ–±–∫–∏")

    elif message.text == '–†–µ–±—É—Ç':
        bot.send_message(message.chat.id, "–ö–æ–ª–∏—Å—å –∑—Ä–æ–±–ª—é—é.")
    elif message.text == '–î–£-02 => Wialon.cvs':
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑ —Å–æ—Ñ—Ç—É –î–£-02, —è –π–æ–≥–æ –ø–µ—Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç—É—é —Ç–∞ "
                                          "–ø–æ–≤–µ—Ä–Ω—É —à–∞–±–ª–æ–Ω —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è Wialon –≤ —Ñ–æ—Ä–º–∞—Ç—ñ *.cvs")
        bot.register_next_step_handler(message, wait_for_file_DU02)
    elif message.text == 'Bitrek Sensor => Wialon.cvs':
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑ —Å–æ—Ñ—Ç—É Bitrek Sensor, —è –π–æ–≥–æ –ø–µ—Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç—É—é —Ç–∞ "
                                          "–ø–æ–≤–µ—Ä–Ω—É —à–∞–±–ª–æ–Ω —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è Wialon –≤ —Ñ–æ—Ä–º–∞—Ç—ñ *.cvs")
        bot.register_next_step_handler(message, wait_for_file_BISensor)
    elif message.text == 'TEST':
        bot.send_message(message.chat.id,
                         '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ç–µ—Å—Ç–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó, –∫–∏–Ω—å—Ç–µ —è–∫–µ—Å—å üí©, —â–æ–± –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:')
        bot.register_next_step_handler(message, test_function)

    elif message.text == '<-–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

    else:
        bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())


def find_function(message):

    if message.text == "<-–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é", reply_markup=engineer_gps_menu())
    if message.text in ["–ü–æ EMEI", "–ü–æ SIM", "–ü–æ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä—É"]:
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É!\n–í–∏–±–µ—Ä—ñ—Ç—å –∑–Ω–æ–≤—É –∫—Ä–∏—Ç–µ—Ä—ñ–π –ø–æ—à—É–∫—É.")
        return
    plate_number = message.text.strip().upper()
    bot.send_message(message.chat.id, f"–í–∏ –≤–≤–µ–ª–∏ –¥–µ—Ä–∂. –Ω–æ–º–µ—Ä = {plate_number}")

    # —Ç—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–µ—Ä–∂–Ω–æ–º–µ—Ä–∞
    if plate_number == "ALL" or (len(plate_number) == 8 and plate_number[:2].isalpha() and plate_number[2:6].isdigit() and plate_number[
                                                                                                 6:].isalpha()):
        bot.send_message(message.chat.id, f"–î–µ—Ä–∂ –Ω–æ–º–µ—Ä {plate_number} –ø—Ä–∏–π–Ω—è—Ç–æ!")


        session = WialonManager(WIALON_URL, WIALON_TOKEN)
        print(session._get_info())


        my_json = session._get_list_universal("avl_unit",
                                              "sys_name",
                                              f"*{plate_number}*",
                                              "sys_name", 1, 1 + 256 + 1024 + 4096 + 2097152, 0, 10000)

        if len(my_json['items']) == 0:
            bot.send_message(message.chat.id, f"–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –¥–µ—Ä–∂.–Ω–æ–º–µ—Ä–∞")
            main_menu()
            return
        ask_confirmation(message,len(my_json['items']))

        user_state[message.from_user.id] = {'wialon_json': session._get_special_list_json(my_json)}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ list_json –≤ —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç–∞–Ω—ñ–≤


    else:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç." ,reply_markup=engineer_gps_search_menu())



def generate_answer(category: String, cluster: String):
    match (category, cluster):
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ê–ü'):
            return "–ê–ü –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ê–ö'):
            return "–ê–ö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–°–ê'):
            return "–°–ê –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ë–ê'):
            return "–ë–ê –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ß–Ü–ú–ö'):
            return "–ß–Ü–ú–ö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case ('–í–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–Ü–ú–ö'):
            return "–Ü–ú–ö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ 1 –≥—Ä—É–ø–∞"
        case _:
            return None


def wait_for_file_BISensor(message):
    """
       –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –±—ñ—Ç—Ä–µ–∫ –¥—É—Ç—ñ–≤ –≤—ñ–¥ Bitrek
       1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª.xls
       2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
       3. –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª.csv –¥–ª—è Wialon Local
       4.–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Ñ–∞–π–ª.xls –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
       5.–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª.csv –≤ –±–æ—Ç

       :param message: –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞
       :return: None
       """
    try:
        if ((message.content_type == 'document')
                and (message.document.mime_type == 'application/x-msexcel')
                and ("xls" in message.document.file_name)):
            bot.send_message(message.chat.id, f"–§–∞–π–ª {message.document.file_name}  –û—Ç—Ä–∏–º–∞–≤. –ü–æ—á–∏–Ω–∞—é –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é ‚è≥")

            converter = FileManager(message, bot)
            converter.save_file_bitrek_excell()
            if not converter._get_table_dut():
                bot.send_message(message.chat.id, "–§–∞–π–ª –ø—É—Å—Ç–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
                return

            temp_file = converter._get_file_to_chat(converter._get_table_dut())
            file_name_to_save = message.document.file_name.rsplit('.', 1)[0] + ".csv"
            bot.send_document(message.chat.id, temp_file[1],
                              caption=f"–¢—É—Ç –º–∞–ª–∞ –±–∏ –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞—Ä—É–≤–∞–Ω–Ω—è, –∞–ª–µ –Ω–∞–∂–∞–ª—å, —ó—ó –Ω–µ –º–∞—î",
                              visible_file_name=file_name_to_save)

            bot.send_message(message.chat.id, "–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø—ñ—à–Ω–æ!", reply_markup=main_menu())
        elif message.text == '<-–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())
        else:
            # –Ø–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–∞–π–ª –∞ —â–æ—Å—å —ñ–Ω—à–µ
            bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–∏–Ω—å —Ç–∞—Ä—É–≤–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é *.xls")
            bot.register_next_step_handler(message, wait_for_file_BISensor)  # –ß–µ–∫–∞—î–º –∑–Ω–æ–≤—É —Ñ–∞–π–ª
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


# –û–±—Ä–æ–±–∫–∞ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –î–£-02
def wait_for_file_DU02(message):
    """
       \–§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞—Ä—É–≤–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –¥—É—Ç—ñ–≤ –î–£-02
       1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª.txt
       2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É, –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
       3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª.csv –¥–ª—è Wialon Local
       4.–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª.csv –≤ –±–æ—Ç –∑ –î–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç–∞—Ä—É–≤–∞–Ω–Ω—è
       :param message: –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞
       :return: None
       """

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–æ–∫—É–º–µ–Ω—Ç) —Ç–∞ –Ω–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .txt
    if (message.content_type == 'document') and (message.document.mime_type == 'text/plain'):

        file_name = message.document.file_name
        bot.send_message(message.chat.id, f"–§–∞–π–ª {file_name}  –û—Ç—Ä–∏–º–∞–≤. –ü–æ—á–∏–Ω–∞—é –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é ‚è≥")

        try:
            converter = FileManager(message, bot)
            converter._downloadfile()
            converter._extract_table_du02()
            if not converter._get_table_dut():
                bot.send_message(message.chat.id, "–§–∞–π–ª –ø—É—Å—Ç–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
                return
            temp_file = converter._get_file_to_chat(converter._get_table_dut())

            json_data = json.dumps(converter._get_info_for_save(), indent=4, ensure_ascii=False)
            # json_data = "\n".join([f"*{key}:*\n{value}" for key, value in converter._get_info_for_save().items()])

            bot.send_document(message.chat.id, temp_file[1],
                              caption=f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é: ```json\n{json_data}\n``` ", parse_mode="MarkdownV2",
                              visible_file_name=(lambda info: f"{info['–ê–≤—Ç–æ–º–æ–±–∏–ª—å']} {info['–ì–æ—Å. –Ω–æ–º–µ—Ä']}")(
                                  converter._get_info_for_save()) + ".csv"
                              )
            bot.send_message(message.chat.id, "–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø—ñ—à–Ω–æ!", reply_markup=main_menu())
        except:
            bot.send_message(message.chat.id, "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞")

    elif message.text == '<-–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())
    else:
        # –Ø–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–∞–π–ª –∞ —â–æ—Å—å —ñ–Ω—à–µ
        bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–∏–Ω—å —Ç–∞—Ä—É–≤–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é *.txt")
        bot.register_next_step_handler(message, wait_for_file_DU02)  # –ß–µ–∫–∞—î–º –∑–Ω–æ–≤—É —Ñ–∞–π–ª


bot.polling(none_stop=True)
